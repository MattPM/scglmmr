[{"path":"https://mattpm.net/scglmmr/articles/pseudobulk_mixed_effects.html","id":"pseudobulk-mixed-effects-models","dir":"Articles","previous_headings":"","what":"1. pseudobulk mixed effects models","title":"Pseudobulk differential expression with nested group repeated measures single cell experiment designs","text":"functions implement wrappers around limma fitting fixed effect linear models dream method variancePartition package. dream method way test differential expression accomodating ‘random’ varying effects. statistically necessary account non-independence perturbation experiments repeated measurements donors. enable linear models (e.g. modeling mean normal distribution) fit gene counts, dream accounts mean variance trend via incorporating voom observational weights. analysis 2 group repeated measures experiment design shown. Pre-treatment baseline effect differences, treatment effets across donors difference treatment effects compared modeling variation baseline expression using random intercept term.","code":"#devtools::install_github(repo = \"https://github.com/MattPM/scglmmr\") library(scglmmr)"},{"path":"https://mattpm.net/scglmmr/articles/pseudobulk_mixed_effects.html","id":"load-single-cell-data-aggregate-and-quaity-control","dir":"Articles","previous_headings":"","what":"Load single cell data, aggregate and quaity control","title":"Pseudobulk differential expression with nested group repeated measures single cell experiment designs","text":"","code":"datapath = \"mypath/\"  # load seurat or sce object etc.  s = readRDS(\"path/seuratobject.rds\")  # define counts and metadata and subset to cells above rm seurat object from workspace  meta = s@meta.data umi = s@assays$RNA@counts rm(s); gc()  # QC contingency of cells by subject for each celltype  tab = scglmmr::SubjectCelltypeTable(metadata = meta, celltype_column = \"celltype\", sample_column = \"sample\") tab$celltypes_remove; tab$`low representation celltypes`; tab$table  # remove cells prior to pseudobulk analysis  meta = meta[!meta$celltype_label_3 %in% tab$celltypes_remove, ]  # subset data  umi = umi[ ,rownames(meta)]  # Create aggregated pseudobulk data pb = scglmmr::PseudobulkList(   rawcounts = umi,   metadata = meta,    sample_col = \"sample\",   celltype_col = \"celltype\",   avg_or_sum = \"sum\"   )   # Create aggretated sample level metadata met = scglmmr::AggregateCellMetadata(   cell.metadata = meta,    sample_column = 'sample',    variable_columns = c('subjectid', 'timepoint', 'response', 'age', 'sex'),   pseudobulk.List = pb   )  # creation of a combined grouping factor indicating both timepoint and group # (e.g. t0_Group1, t0_group2) will make it simple to set up contrasts. # here group means 'response group' i.e. high vs low responder.  # also convert other variables to factors and do some standard transformation # of metadata. met$group.time = paste(met$group, met$timepoint, sep = '_')  # make sure this is a factor and the levels are in a coherent order for the  # contrast matrix -- see below. here:  # time 0 = 0, time 1 = 1.  # low response = 0 high response = 1.  met$group.time = factor(   met$group.time,   levels = c(\"1_0\", \"1_1\", \"0_0\", \"0_1\")   )  # now filter genes within each cell type that are reasonably expressed.  design = model.matrix( ~ 0 + met$group.time) dge = Normalize(pseudobulk.list = pb,design = design,minimum.gene.count = 5)"},{"path":"https://mattpm.net/scglmmr/articles/pseudobulk_mixed_effects.html","id":"fit-models-and-specify-a-priori-contrasts-corresponding-to-the-desired-effect-comparisons","dir":"Articles","previous_headings":"","what":"Fit models and specify a priori contrasts corresponding to the desired effect comparisons","title":"Pseudobulk differential expression with nested group repeated measures single cell experiment designs","text":"use function variancePartition package makeContrastsDream similar function makeContrasts limma works way. also specify varying intercept model using lme4 symbolic formula. information symbolic model formulas. Fit models. ’s also possible fit simple model baseline contrast since random effects needed.","code":"# Now we  specify model  f1 <- ~ 0 + age + sex + group.time + (1|subjectid)   # make contrast matrix  L2 = makeContrastsDream(   formula = f1,    data = samplemd,   contrasts = c(     baseline = \"group.time1_0 - group.time0_0\", # note fixef model also fit for this single time point contrast      treatment_delta = \"( group.time1_1 - group.time1_0 ) - ( group.time0_1 - group.time0_0 )\",     treatment = \"( group.time1_1 + group.time0_1 ) / 2 - ( group.time1_0 + group.time0_0 ) / 2 \"     )   )  # visualize the contrast matrix, compare to levels of group.time variable # to check for correctly specified effects.  plotContrasts(L2) fit1 = FitDream(pb.list = dge,                  sample.metadata = met,                  lme4.formula = f1,                  dream.contrast.matrix = L2,                 ncores = 4) # fit simple linear model for the baseline group level contrast  design.2 = model.matrix(~0 + age + sex + group.time, data = met) fit0 = scglmmr::RunVoomLimma(dgelists = dge,                             design_matrix = design.2,                             do_contrast_fit = T,                            # we use only the first row of the contrast matrix L2                            my_contrast_matrix = L2[ ,1])"},{"path":"https://mattpm.net/scglmmr/articles/pseudobulk_mixed_effects.html","id":"downstream-gene-set-enrichment-analysis-within-celltypes-for-different-effects","dir":"Articles","previous_headings":"","what":"Downstream gene set enrichment analysis within celltypes for different effects","title":"Pseudobulk differential expression with nested group repeated measures single cell experiment designs","text":"Run gene set enrichment analysis within cell type fbased genes ranked effect size effects defined .","code":"# parallelize fgsea  BiocParallel::register(BiocParallel::SnowParam(4)) pparam = BiocParallel::SnowParam(workers = 4, type = \"SOCK\", progressbar = TRUE)  # msigDB hallmark pathways are included in package hlmk = scglmmr::hallmark  # gsea: baseline differences between groups - hypothesis set and hallmark pathway r0 = ExtractResult(model.fit.list = fit0,                    what = 'gene.t.ranks',                    coefficient.number = 1,                    coef.name = 'baseline_irae') hlmk.0 = FgseaList(rank.list.celltype = r0,                    pathways = hlmk,                    BPPARAM = pparam)  # gsea: treatment effect (across all donors) - hypothesis set and hallmark pathway rtreat = ExtractResult(model.fit.list = fit1,                        what = 'gene.t.ranks',                        coefficient.number = 3,                        coef.name = 'treatment') hlmk.treat = FgseaList(rank.list.celltype = rtreat,                        pathways = hlmk,                        BPPARAM = pparam)  # gsea: difference in treatment effect between groups (irae / no irae) hypothesis set and hallmark pathway rdelta = ExtractResult(model.fit.list = fit1,                        what = 'gene.t.ranks',                        coefficient.number = 2,                        coef.name = 'treatment_delta') hlmk.delta = RunFgseaOnRankList(rank.list.celltype = rdelta,                                 pathways = hlmk,                                 BPPARAM = pparam)"},{"path":"https://mattpm.net/scglmmr/articles/pseudobulk_mixed_effects.html","id":"further-analysis-and-curation-of-enrichment-results","dir":"Articles","previous_headings":"","what":"Further analysis and curation of enrichment results","title":"Pseudobulk differential expression with nested group repeated measures single cell experiment designs","text":"","code":"# full set of leading edge genes indexed by celltype x effect x module  lefull = scglmmr::GetLeadingEdgeFull(gsea.list = hlmk.treat,                                      padj.filter = 0.02,                                       NES.filter = -Inf)  # extract model fit results instead of ranks fit1.res = scglmmr::ExtractResult(model.fit.list = fit1,                                    coefficient.number = 3,                                    coef.name = 'treatment')  # combine GSEA results with model coefficient for each gene in leading edge  # include all leading edge genes irrespective of individual gene p value  cr = scglmmr::CombineResults(gsealist = hlmk.treat,                               contrastlist = fit1.res,                               gseafdr = 0.02,                               genefdr = 1)"},{"path":"https://mattpm.net/scglmmr/articles/pseudobulk_mixed_effects.html","id":"extract-all-leading-edge-genes-indexed-by-cell-type","dir":"Articles","previous_headings":"","what":"Extract all leading edge genes indexed by cell type","title":"Pseudobulk differential expression with nested group repeated measures single cell experiment designs","text":"","code":"li = scglmmr::LeadingEdgeIndexed(gsea.result.list = hlmk.treat, padj.threshold = 0.02)"},{"path":"https://mattpm.net/scglmmr/articles/pseudobulk_mixed_effects.html","id":"calculate-the-jaccard-similarity-of-the-leading-edge-genes-for-enrichments-within-a-given-cell-type-and-effect","dir":"Articles","previous_headings":"","what":"Calculate the Jaccard similarity of the leading edge genes for enrichments within a given cell type and effect","title":"Pseudobulk differential expression with nested group repeated measures single cell experiment designs","text":"","code":"# figpath.temp = here('figures') treat.JI = EnrichmentJaccard(gsealist = hlmk.treat,                            indexedgenes = li,                            #saveplot = TRUE,                            #figpath = figpath.temp,                           returnJaccardMtx = TRUE)  # curate results  results.sorted = treat.JI$sortedgsea %>%   dplyr::mutate(signal = paste(celltype, pathway, sep = '~'))    # data.table::fwrite(results.sorted, file = paste0(datapath, 'g0.result.sort.txt'),sep = \"\\t\")"},{"path":"https://mattpm.net/scglmmr/articles/pseudobulk_mixed_effects.html","id":"visualization-of-enrichment-results","dir":"Articles","previous_headings":"","what":"Visualization of enrichment results","title":"Pseudobulk differential expression with nested group repeated measures single cell experiment designs","text":"Create bubble plot heatmap enrichment results within clusters Create heatmap genes based model fit coefficients","code":"p = PlotFgsea(gsea_result_list = hlmk.treat, NES_filter = -Inf,padj_filter = 0.02) gene.mat = GetGeneMatrix(result.list = fit1,                           pvalfilter = 0.05,                           stat_for_matrix = 'logFC',                          logfcfilter = 0.1)  HeatmapDiag(matrix = gene.mat)  # can also call pheatmap on gene.mat"},{"path":"https://mattpm.net/scglmmr/articles/pseudobulk_mixed_effects.html","id":"additional-visualization-methods","dir":"Articles","previous_headings":"","what":"Additional visualization methods","title":"Pseudobulk differential expression with nested group repeated measures single cell experiment designs","text":"","code":"# make tidy average data for visualization of weighted pb results  av = scglmmr::PseudobulkList(rawcounts = umi,                               metadata = meta,                               sample_col = \"sample\",                               celltype_col = \"celltype\",                              avg_or_sum = 'average') le_expr = scglmmr::LeadEdgeTidySampleExprs(av.exprs.list = av,                                            gsea.list = hlmk.treat,                                             padj.filter = 0.1,                                            NES.filter = -Inf)   # example plot of sample level average leading edge genes annotated  scglmmr::LeadEdgeSampleHeatmap(tidy.exprs.list = le_expr,                                modulename = \"MODULENAME\",                                elltype_plot = \"TCELL\",                                metadata = meta,                                 metadata_annotate = c('group', 'timepoint', 'age', 'sex'),                                sample_column = 'sample',                                returnmat = F,                                 savepath = figpath,                                 savename = \"filename\")  # see also:  # scglmmr::TopGenesTidySampleExprs() - same as aobve for 'top' de genes estimated by model coeffcient / p value.  # scglmmr::GetTidySummary() - for custom plotting   # sample level vsualization of average data above  # repeat this for all enriched pathways  heatpath = here(\"sime/path\"); dir.create(heatpath) for (i in 1:length(le_expr)) {   cdat = le_expr[[i]]   ctype = names(le_expr[i])   umod = unique(cdat$module)   for (u in 1:length(umod)) {     scglmmr::LeadEdgeSampleHeatmap(tidy.exprs.list = le_expr,                            modulename = umod[u],                            celltype_plot = ctype,                           metadata = meta, metadata_annotate = c('group', 'timepoint', 'age', 'gender'),                           sample_column = 'sample',                           returnmat = F,                            savepath = heatpath,                           savename = paste0(ctype, \" \",umod[u],'.pdf'))   } }"},{"path":"https://mattpm.net/scglmmr/articles/scglmmr_singlecell.html","id":"single-cell-gene-module-level-testing-","dir":"Articles","previous_headings":"","what":"Single cell gene module level testing.","title":"Single cell gene and module differential expression with nested group repeated measures experiment designs","text":"Compare single cell level module score responses across groups. pseudobulk vignette, fit models within cell type adjusting covariates using random intercept term donor. Functions used workflow include: WeightedCellModuleScore - score module activity cell; method can used . discuss relative vs absolute scaling across cells vs within cell types effect size interpretation. FitLmer - fits linear model using lme4 notation module scores. Returns nested list model results can queried extract effects interest. FitLmerContrast - , specifically designed 2 group 2 timepoint repeated measures perturbation designs. Automatically calculates baseline differences, treatment effect across subjects difference treatment effects groups using emmeans package. plot shown generated module x cell type.","code":""},{"path":"https://mattpm.net/scglmmr/articles/scglmmr_singlecell.html","id":"load-and-normalize-single-cell-data","dir":"Articles","previous_headings":"","what":"Load and normalize single cell data","title":"Single cell gene and module differential expression with nested group repeated measures experiment designs","text":"","code":"suppressMessages(library(tidyverse)) suppressMessages(library(Seurat)) suppressMessages(library(here)) suppressMessages(library(scglmmr))  # demonstrate using Seurat object s = readRDS(here(\"singlecellobject.rds\"))  # create a vector of celltypes  ct = unique(s@meta.data$celltype)  # normalize with log normalization s = NormalizeData(s,normalization.method = 'LogNormalize',assay = 'RNA')"},{"path":"https://mattpm.net/scglmmr/articles/scglmmr_singlecell.html","id":"define-modules-to-fit","dir":"Articles","previous_headings":"","what":"Define modules to fit","title":"Single cell gene and module differential expression with nested group repeated measures experiment designs","text":"functions can useful interrogate pathways identified pseudobulk pipeline unbiased analysis. demonstration purposes, subset hallmark pathways used.","code":"sigs_test = hallmark[c(22, 23, 24,25,26,27)]"},{"path":"https://mattpm.net/scglmmr/articles/scglmmr_singlecell.html","id":"format-cell-metadata","dir":"Articles","previous_headings":"","what":"Format cell metadata","title":"Single cell gene and module differential expression with nested group repeated measures experiment designs","text":"","code":"# format cell metadata as factors group_id is order leveled for:  md = s@meta.data %>%    filter(timepoint %in% c(0,1)) %>%    mutate(group_id = paste(group, timepoint, sep = '_')) %>%    mutate(group_id = factor(group_id,  levels = c('0_0', '0_1', '1_0', '1_1'))) %>%   select(celltype, subjectid, sex , age, timepoint, group_id) %>%    mutate(age = as.numeric(age)) %>%    droplevels()"},{"path":"https://mattpm.net/scglmmr/articles/scglmmr_singlecell.html","id":"quality-control-cell-types-to-be-fit","dir":"Articles","previous_headings":"","what":"Quality control cell types to be fit","title":"Single cell gene and module differential expression with nested group repeated measures experiment designs","text":"cell type donor specific cells couple subjects cant interpret group level effects remove cell types.","code":"# qc data to remove celltypes with no cells for some subhects at both timepoints  # keeps MLE more stable for the estimates of random intercept  ct.si = apply(table(md$celltype, md$subjectid) , 1, min)  c.keep = names(ct.si[ct.si > 7]) md = md[md$celltype %in% c.keep, ]"},{"path":"https://mattpm.net/scglmmr/articles/scglmmr_singlecell.html","id":"calculate-module-scores","dir":"Articles","previous_headings":"","what":"Calculate module scores","title":"Single cell gene and module differential expression with nested group repeated measures experiment designs","text":"can done multiple ways. function calculates simple average. Note interpretability efects within cluster, score applied scaled within cell type.","code":"# add single cell weighted module scores # split to standardize within cell type  ct.md = split(md, f = md$celltype)  # get umi data  umi = s@assays$RNA@data[ ,rownames(md)]  # fit module scores  mod_scores = lapply(ct.md, function(x){    scglmmr::WeightedCellModuleScore(gene_matrix = umi[ ,rownames(x)],                                     module_list = sigs_test,                                     threshold = 0,                                    # standardize within protein celltype                                    cellwise_scaling = TRUE,                                     return_weighted = FALSE )   }) ms = bind_rows(mod_scores)  # correctly order rows after the split.  ms = ms[match(x = rownames(md), table = rownames(ms)), ] stopifnot(all.equal(rownames(ms), rownames(md)))"},{"path":"https://mattpm.net/scglmmr/articles/scglmmr_singlecell.html","id":"fit-modules","dir":"Articles","previous_headings":"","what":"Fit modules","title":"Single cell gene and module differential expression with nested group repeated measures experiment designs","text":"Specify model using lme4 notation fit models. Note LHS outcome “modulescore” changed adaptively applied module internally.","code":"# specify model  f1 = 'modulescore ~ 0 + timepoint + age + sex + (1|subjectid)'  # specify a path to save plots  plot_savepath = here('/mypath/')   # fit sc mod mixed model on ewighted module scores.  mmres = FitLmer(module_data_frame = ms,                 celltype_column = 'celltype',                 metadata = md,                  lme4.formula = f1)"},{"path":"https://mattpm.net/scglmmr/articles/scglmmr_singlecell.html","id":"examine-results","dir":"Articles","previous_headings":"","what":"Examine results","title":"Single cell gene and module differential expression with nested group repeated measures experiment designs","text":"Results formatted list indexed cell type. want find effects time expression can use following code extract effect shown using emmeans package. allows maximum flexibility since effect can extracted custom contrast matrices can utilized – see emmeans documentation.","code":"# write wrapper to extract out time effect. extract.time.effect = function(fit.list.celltype){    c_res = list()   for(u in length(fit.list.celltype)){      emm1 = tryCatch(         emmeans::emmeans(object = m1, specs = ~ timepoint , data = res, lmer.df = \"asymptotic\"),         error = function(e) return(NA)         )     c_res[[u]] = emm1   } }  # now we can apply this to each cell type.  time.result = lapply(mmres , extract.time.effect)"},{"path":"https://mattpm.net/scglmmr/articles/scglmmr_singlecell.html","id":"a-custom-function-for-automatically-extracting-effects-from-a-2-group-repeated-measures-treatment-design","dir":"Articles","previous_headings":"","what":"a custom function for automatically extracting effects from a 2 group repeated measures treatment design","title":"Single cell gene and module differential expression with nested group repeated measures experiment designs","text":"function written 2 group design (shown main readme) subjects pre post perturbation measurement. wantto compare pertuebation effects across subjects, groups test baseline differences. effects extracted automatically simple output, plots created . function, RHS, + (1|subjectid) also changed. One can also specify fixed effects covariates vector. Note effect size specific module scores may compared using code determine celltype greatest absolute effect size (epression) given module. within cell type expression group level differences likely interest interpretation.","code":"f1 = 'modulescore ~ 0 + groupid + age + sex + (1|subjectid)'  # fit sc mod mixed model on ewighted module scores.  mm_res.m1 = FitLmerContrast(module_data_frame = ms,                              celltype_column = 'celltype',                              metadata = md,                              lmer_formula = f1,                              plotdatqc = TRUE,                              fixed_effects = NULL,                             figpath = plot_savepath) # saveRDS(mm_res.m1,file = paste0(datapath, \"mm_res.m1.rds\")) ms.full = scglmmr::WeightedCellModuleScore(   gene_matrix = umi,    module_list = sigs_test,    threshold = 0,   # standardize within protein celltype   cellwise_scaling = TRUE,    return_weighted = FALSE    )  d = cbind(ms.full, md)  # absolute effect size for hallmark  f1 = as.formula(HALLMARK_HYPOXIA ~ celltype + age + sex + (1|subjecctID)) m1 = lme4::lmer(f1, data = bl) emm1 = emmeans::emmeans(m1, specs = ~celltype) plot(emm1)"},{"path":"https://mattpm.net/scglmmr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthew Mulè. Author, maintainer. Andrew Martins. Contributor. John Tsang. Thesis advisor.","code":""},{"path":"https://mattpm.net/scglmmr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mulè M (2022). scglmmr: Sample-level Single-cell Generalized Linear Multilevel Models R. R package version 0.1.0, https://github.com/MattPM/scglmmr.","code":"@Manual{,   title = {scglmmr: Sample-level Single-cell Generalized Linear Multilevel Models in R},   author = {Matthew Mulè},   year = {2022},   note = {R package version 0.1.0},   url = {https://github.com/MattPM/scglmmr}, }"},{"path":"https://mattpm.net/scglmmr/index.html","id":"sample-level-single-cell-glmms-in-r","dir":"","previous_headings":"","what":"Sample-level Single-cell Generalized Linear Multilevel Models in R ","title":"Sample-level Single-cell Generalized Linear Multilevel Models in R ","text":"package active development R package implementing mixed effects modeling methods single cell data can accomodate many different complex experiment designs. package built around lme4 originally made analysis single cell data collected many individuals assayed pre- post- perturbation drug treatment, nested within one response groups. methods herein allow one compare difference perturbation response effects groups modeling variation donor expression. also many wrappers downstream enrichment testing visualization. Please see vignettes","code":""},{"path":"https://mattpm.net/scglmmr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Sample-level Single-cell Generalized Linear Multilevel Models in R ","text":"","code":"devtools::install_github(repo = \"https://github.com/MattPM/scglmmr\") library(scglmmr)"},{"path":"https://mattpm.net/scglmmr/index.html","id":"single-cell-within-cluster-perturbation-response-differential-expression","dir":"","previous_headings":"","what":"Single cell within cluster perturbation response differential expression","title":"Sample-level Single-cell Generalized Linear Multilevel Models in R ","text":"purpose software analyze single cell genomics data pre post perturbation measurements individuals, including complex designs many subjects, subject repeated measurements pre post perturbation subject nested within different groups, different end point response correlates, e.g. high low responders. focus implementing flexible generalized linear multilevel models derive group (.e. good poor clinical outcome, high low rug response) treatment associated effects within cell types defined either protein (e.g. CITE-seq data) transcriptome based clustering followed downstream enrichment testing visualization. number model covariates can specified. vignettes provide methods random intercept term teh donor ID cell aggregated library incluided model. methods model variation around average baseline expression across individuals, accomodating non-independence expression repeated timepoints subject. overview methods provided:","code":""},{"path":"https://mattpm.net/scglmmr/index.html","id":"id_1-pseudobulk-aggregated-models","dir":"","previous_headings":"Single cell within cluster perturbation response differential expression","what":"1. pseudobulk aggregated models","title":"Sample-level Single-cell Generalized Linear Multilevel Models in R ","text":"functions implement wrappers around limma fitting fixed effect linear models dream method variancePartition package. dream method way test differential expression accomodating ‘random’ varying effects. statistically necessary account non-independence perturbation experiments repeated measurements donors. enable linear models (e.g. modeling mean normal distribution) fit gene counts, dream accounts mean variance trend via incorporating voom observational weights.","code":""},{"path":"https://mattpm.net/scglmmr/index.html","id":"id_2-single-cell-gene-and-gene-module-level-mixed-effects-models","dir":"","previous_headings":"Single cell within cluster perturbation response differential expression","what":"2. single cell gene and gene module level mixed effects models","title":"Sample-level Single-cell Generalized Linear Multilevel Models in R ","text":"Test perturbation effect using gene level Poisson mixed model.","code":""},{"path":"https://mattpm.net/scglmmr/index.html","id":"id_3-single-cell-module-level-mixed-effect-models","dir":"","previous_headings":"Single cell within cluster perturbation response differential expression","what":"3. single cell module level mixed effect models","title":"Sample-level Single-cell Generalized Linear Multilevel Models in R ","text":"Test perturbation effects differences perturbation responses groups gene module level.","code":""},{"path":"https://mattpm.net/scglmmr/index.html","id":"id_4-downstream-enrichment-testing-and-visualization","dir":"","previous_headings":"Single cell within cluster perturbation response differential expression","what":"4. Downstream enrichment testing and visualization","title":"Sample-level Single-cell Generalized Linear Multilevel Models in R ","text":"wrapper functions around multiple gene set enrichment methods, emphasis fast set gene enrichment (fgsea) package. results fgsea can interrogated methods contrasting information content genes driving enrichments within celltypes. Multiple visualization wrappers also provided.","code":""},{"path":"https://mattpm.net/scglmmr/index.html","id":"philosophy","dir":"","previous_headings":"Single cell within cluster perturbation response differential expression","what":"Philosophy","title":"Sample-level Single-cell Generalized Linear Multilevel Models in R ","text":"package models expression within cluster/ cell type independently order capture perturbation effects cell type specific genes well genes expressed multiple cell types. Using normal distribution count data requires first modeling mean variance trend (see Law et al) requires filtering features (genes) expressed iven cell type. cell type specific transcripts therefore tested perturbation effects within cell types express genes, instead across cell types. Genes shared across cell types can conpared coherent perturbation effects across subjects different groups subjects using contrast coding. approach particularly well suited multimodal single cell data cells clustered based independent information perturbation effects. example, utilized methods package CITE-seq data first denoise ADT data using method dsb followed modeling transcriptome differences cell types, group level perturbation response effects using package. Experiment designs (within cluster / celltype) supported scglmmr 2 group repeated measures experiment. data can accomodated scglmmr. simple experiment designs also supported, example 2 groups one timepoint complex experiments example 3 timepoints. Questions? Pls open issue.","code":""},{"path":"https://mattpm.net/scglmmr/reference/AggregateCellMetadata.html","id":null,"dir":"Reference","previous_headings":"","what":"AggregateCellMetadata - take cell level metadata and collapse down to sample-level\nmetadata for use in pseudobuk testing. This can be useful if you do not already have\nmetadata for each sample in the experiment, but these data are stored in single cell\nmetadata. For example, metadata for the donor ID, unique sample\n(e.g. donorid_timepoint), age, sex etc. Note these are all individual sample level data.\nSingle cell intrinsic variables like nUMI cannot be collapsed down, only variables that\nare unique for each sample which are the columns of the pseudobulk data. Only include\nmetadata that you intend to adjust models for as covariates or random effects because all\nvariables will be referenced during count normalization and feature filtering. — AggregateCellMetadata","title":"AggregateCellMetadata - take cell level metadata and collapse down to sample-level\nmetadata for use in pseudobuk testing. This can be useful if you do not already have\nmetadata for each sample in the experiment, but these data are stored in single cell\nmetadata. For example, metadata for the donor ID, unique sample\n(e.g. donorid_timepoint), age, sex etc. Note these are all individual sample level data.\nSingle cell intrinsic variables like nUMI cannot be collapsed down, only variables that\nare unique for each sample which are the columns of the pseudobulk data. Only include\nmetadata that you intend to adjust models for as covariates or random effects because all\nvariables will be referenced during count normalization and feature filtering. — AggregateCellMetadata","text":"AggregateCellMetadata - take cell level metadata collapse sample-level metadata use pseudobuk testing. can useful already metadata sample experiment, data stored single cell metadata. example, metadata donor ID, unique sample (e.g. donorid_timepoint), age, sex etc. Note individual sample level data. Single cell intrinsic variables like nUMI collapsed , variables unique sample columns pseudobulk data. include metadata intend adjust models covariates random effects variables referenced count normalization feature filtering.","code":""},{"path":"https://mattpm.net/scglmmr/reference/AggregateCellMetadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AggregateCellMetadata - take cell level metadata and collapse down to sample-level\nmetadata for use in pseudobuk testing. This can be useful if you do not already have\nmetadata for each sample in the experiment, but these data are stored in single cell\nmetadata. For example, metadata for the donor ID, unique sample\n(e.g. donorid_timepoint), age, sex etc. Note these are all individual sample level data.\nSingle cell intrinsic variables like nUMI cannot be collapsed down, only variables that\nare unique for each sample which are the columns of the pseudobulk data. Only include\nmetadata that you intend to adjust models for as covariates or random effects because all\nvariables will be referenced during count normalization and feature filtering. — AggregateCellMetadata","text":"","code":"AggregateCellMetadata(   cell.metadata,   sample_column,   variable_columns,   pseudobulk.List )"},{"path":"https://mattpm.net/scglmmr/reference/AggregateCellMetadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AggregateCellMetadata - take cell level metadata and collapse down to sample-level\nmetadata for use in pseudobuk testing. This can be useful if you do not already have\nmetadata for each sample in the experiment, but these data are stored in single cell\nmetadata. For example, metadata for the donor ID, unique sample\n(e.g. donorid_timepoint), age, sex etc. Note these are all individual sample level data.\nSingle cell intrinsic variables like nUMI cannot be collapsed down, only variables that\nare unique for each sample which are the columns of the pseudobulk data. Only include\nmetadata that you intend to adjust models for as covariates or random effects because all\nvariables will be referenced during count normalization and feature filtering. — AggregateCellMetadata","text":"cell.metadata dataframe meta data cells-rows columns .e. ColData Seurat@meta.data. sample_column quoted character e.g. \"sample\". indicate variable corresponding rows pseudobulk gene expression data. variable_columns experiment variables coresponding sample level data. example: c('SubjectID', 'timepoint', 'sex', 'age'). pseudobulklist object output PseudobulkList. used check columns aggregated metadata match columns elements Pseudobulk list.","code":""},{"path":"https://mattpm.net/scglmmr/reference/AggregateCellMetadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AggregateCellMetadata - take cell level metadata and collapse down to sample-level\nmetadata for use in pseudobuk testing. This can be useful if you do not already have\nmetadata for each sample in the experiment, but these data are stored in single cell\nmetadata. For example, metadata for the donor ID, unique sample\n(e.g. donorid_timepoint), age, sex etc. Note these are all individual sample level data.\nSingle cell intrinsic variables like nUMI cannot be collapsed down, only variables that\nare unique for each sample which are the columns of the pseudobulk data. Only include\nmetadata that you intend to adjust models for as covariates or random effects because all\nvariables will be referenced during count normalization and feature filtering. — AggregateCellMetadata","text":"Aggregated metadata","code":""},{"path":"https://mattpm.net/scglmmr/reference/AggregateCellMetadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AggregateCellMetadata - take cell level metadata and collapse down to sample-level\nmetadata for use in pseudobuk testing. This can be useful if you do not already have\nmetadata for each sample in the experiment, but these data are stored in single cell\nmetadata. For example, metadata for the donor ID, unique sample\n(e.g. donorid_timepoint), age, sex etc. Note these are all individual sample level data.\nSingle cell intrinsic variables like nUMI cannot be collapsed down, only variables that\nare unique for each sample which are the columns of the pseudobulk data. Only include\nmetadata that you intend to adjust models for as covariates or random effects because all\nvariables will be referenced during count normalization and feature filtering. — AggregateCellMetadata","text":"","code":"if (FALSE) { samplemd = AggregateCellMetadata(cell.metadata = s@meta.data, sample_column = 'sample', variable_columns = c('subjectID', 'timepoint', 'age', 'sex'), pseudobulk.List = pb) }"},{"path":"https://mattpm.net/scglmmr/reference/AverageSampleModuleZscore.html","id":null,"dir":"Reference","previous_headings":"","what":"AverageSampleModuleZscore apply the function calc_avg_module_zscore to a pseudobulklist. — AverageSampleModuleZscore","title":"AverageSampleModuleZscore apply the function calc_avg_module_zscore to a pseudobulklist. — AverageSampleModuleZscore","text":"AverageSampleModuleZscore apply function calc_avg_module_zscore pseudobulklist.","code":""},{"path":"https://mattpm.net/scglmmr/reference/AverageSampleModuleZscore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AverageSampleModuleZscore apply the function calc_avg_module_zscore to a pseudobulklist. — AverageSampleModuleZscore","text":"","code":"AverageSampleModuleZscore(   average.metacell.list,   module.list,   use.module.subset = TRUE,   modules.subset.by.celltype = modules.test )"},{"path":"https://mattpm.net/scglmmr/reference/AverageSampleModuleZscore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AverageSampleModuleZscore apply the function calc_avg_module_zscore to a pseudobulklist. — AverageSampleModuleZscore","text":"average.metacell.list poorly named argument - object created PseudobulkList either average summed pseudobulk data module.list list modules named list element vector gene names use.module.subset TRUE FALSE - calc different set modules celltype use modules.subset..celltype modules.subset..celltype modules.subset..celltype list modules test length = celltypes.vector n modules = unique subset","code":""},{"path":"https://mattpm.net/scglmmr/reference/AverageSampleModuleZscore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AverageSampleModuleZscore apply the function calc_avg_module_zscore to a pseudobulklist. — AverageSampleModuleZscore","text":"returns dataframe module scores celltype","code":""},{"path":"https://mattpm.net/scglmmr/reference/AverageSampleModuleZscore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AverageSampleModuleZscore apply the function calc_avg_module_zscore to a pseudobulklist. — AverageSampleModuleZscore","text":"","code":"if (FALSE) { # av  = object returned by PseudobulkList av.zscore = AverageSampleModuleZscore(  average.metacell.list = av,  module.list = btm,  use.module.subset = FALSE,  ) }"},{"path":"https://mattpm.net/scglmmr/reference/BulkDesignMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"BulkDesignMatrix - designmatrix for the main experiment factor - used in normalization — BulkDesignMatrix","title":"BulkDesignMatrix - designmatrix for the main experiment factor - used in normalization — BulkDesignMatrix","text":"BulkDesignMatrix - designmatrix main experiment factor - used normalization","code":""},{"path":"https://mattpm.net/scglmmr/reference/BulkDesignMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BulkDesignMatrix - designmatrix for the main experiment factor - used in normalization — BulkDesignMatrix","text":"","code":"BulkDesignMatrix(metadata, sample_column, variable_column, pseudobulklist)"},{"path":"https://mattpm.net/scglmmr/reference/BulkDesignMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BulkDesignMatrix - designmatrix for the main experiment factor - used in normalization — BulkDesignMatrix","text":"metadata dataframe meta data cells-rows variables-columns .e. ColData seuratmeta.data sample_column quoted character e.g. \"sample\" subject level sample variable - multiple timepoints subjectID_timepoint .e. s1_0, s1_1 variable_column main experiment variable interest e.g. timepoint implementing custom contrasts difference foldchange groups, combined factor group_time, e.g. pooroutcome_t0, pooroutcome_t1, goodoutcome_t0, goodoutcome_t1 additional covariates can specified dreamMixedModel pseudobulklist list created PseudobulkList","code":""},{"path":"https://mattpm.net/scglmmr/reference/BulkDesignMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BulkDesignMatrix - designmatrix for the main experiment factor - used in normalization — BulkDesignMatrix","text":"design matrix","code":""},{"path":"https://mattpm.net/scglmmr/reference/BulkDesignMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BulkDesignMatrix - designmatrix for the main experiment factor - used in normalization — BulkDesignMatrix","text":"","code":"if (FALSE) { designmat = scglmmr::BulkDesignMatrix(metadata = meta, sample_column = \"sample\", variable_column = \"cohort_timepoint\", pseudobulklist = pb) }"},{"path":"https://mattpm.net/scglmmr/reference/CombineResults.html","id":null,"dir":"Reference","previous_headings":"","what":"CombineResults - For all cell types merge the gsea leading edge genes with their contrast model coefficieint and p value from limma / dream — CombineResults","title":"CombineResults - For all cell types merge the gsea leading edge genes with their contrast model coefficieint and p value from limma / dream — CombineResults","text":"CombineResults - cell types merge gsea leading edge genes contrast model coefficieint p value limma / dream","code":""},{"path":"https://mattpm.net/scglmmr/reference/CombineResults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CombineResults - For all cell types merge the gsea leading edge genes with their contrast model coefficieint and p value from limma / dream — CombineResults","text":"","code":"CombineResults(gsealist, contrastlist, gseafdr, gseap = NULL, genefdr = Inf)"},{"path":"https://mattpm.net/scglmmr/reference/CombineResults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CombineResults - For all cell types merge the gsea leading edge genes with their contrast model coefficieint and p value from limma / dream — CombineResults","text":"gsealist list results returned `RunFgseaOnRankList()` contrastlist list results returned  `scglmmr::ExtractResult()` older versions scglmmr, equivalent results : `GetContrastResults()` , `GetContrastResultsRaw()` gseafdr adjusted p value threshold filter results (gsea) gseap p value threshold filter results (gsea); gseafdr must specified use option genefdr adjusted p value threshold filter individual genes - default leading edge genes returned (recommended)","code":""},{"path":"https://mattpm.net/scglmmr/reference/CombineResults.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CombineResults - For all cell types merge the gsea leading edge genes with their contrast model coefficieint and p value from limma / dream — CombineResults","text":"tidy dataframe","code":""},{"path":"https://mattpm.net/scglmmr/reference/CombineResults.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CombineResults - For all cell types merge the gsea leading edge genes with their contrast model coefficieint and p value from limma / dream — CombineResults","text":"","code":"if (FALSE) { combined_results = CombineResults(gsealist = testgsea, contrastlist = testmod, gseafdr = 0.05,genefdr = 0.2) }"},{"path":"https://mattpm.net/scglmmr/reference/EnrichmentJaccard.html","id":null,"dir":"Reference","previous_headings":"","what":"EnrichmentJaccard - using gsea list and LeadingEdgeIndexed result, compute pairwise jaccard index of leadingedge genes within celltypes. saves a heatmap of modules for each cell type in savpath if saveplot = TRUE. Returns a gsea result dataframe with all celltypes combined and module annotated with average within celltype jaccard index and leadingedge genes. — EnrichmentJaccard","title":"EnrichmentJaccard - using gsea list and LeadingEdgeIndexed result, compute pairwise jaccard index of leadingedge genes within celltypes. saves a heatmap of modules for each cell type in savpath if saveplot = TRUE. Returns a gsea result dataframe with all celltypes combined and module annotated with average within celltype jaccard index and leadingedge genes. — EnrichmentJaccard","text":"EnrichmentJaccard - using gsea list LeadingEdgeIndexed result, compute pairwise jaccard index leadingedge genes within celltypes. saves heatmap modules cell type savpath saveplot = TRUE. Returns gsea result dataframe celltypes combined module annotated average within celltype jaccard index leadingedge genes.","code":""},{"path":"https://mattpm.net/scglmmr/reference/EnrichmentJaccard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EnrichmentJaccard - using gsea list and LeadingEdgeIndexed result, compute pairwise jaccard index of leadingedge genes within celltypes. saves a heatmap of modules for each cell type in savpath if saveplot = TRUE. Returns a gsea result dataframe with all celltypes combined and module annotated with average within celltype jaccard index and leadingedge genes. — EnrichmentJaccard","text":"","code":"EnrichmentJaccard(   ...,   gsealist,   indexedgenes,   saveplot = FALSE,   returnJaccardMtx = FALSE,   figpath )"},{"path":"https://mattpm.net/scglmmr/reference/EnrichmentJaccard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EnrichmentJaccard - using gsea list and LeadingEdgeIndexed result, compute pairwise jaccard index of leadingedge genes within celltypes. saves a heatmap of modules for each cell type in savpath if saveplot = TRUE. Returns a gsea result dataframe with all celltypes combined and module annotated with average within celltype jaccard index and leadingedge genes. — EnrichmentJaccard","text":"gsealist results FgseaList RunFgseaOnRankList (recommend first lapply filter(padj < 0.05 e.g.) ) indexedgenes results fro mLeadingEdgeIndexed saveplot TRUE saves jaccard index heatmap figpath figpath place save figures, file.path().","code":""},{"path":"https://mattpm.net/scglmmr/reference/EnrichmentJaccard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EnrichmentJaccard - using gsea list and LeadingEdgeIndexed result, compute pairwise jaccard index of leadingedge genes within celltypes. saves a heatmap of modules for each cell type in savpath if saveplot = TRUE. Returns a gsea result dataframe with all celltypes combined and module annotated with average within celltype jaccard index and leadingedge genes. — EnrichmentJaccard","text":"curated dataframe gsea results average jaccard index.","code":""},{"path":[]},{"path":"https://mattpm.net/scglmmr/reference/ExtractResult.html","id":null,"dir":"Reference","previous_headings":"","what":"ExtractResult - convenience function to return statistics for downstream analysis functions such as FgseaList. Returns results from list of dream or lmFit results from those functions natively (use model.fit.list = list(fit)) or from scglmmr::RunVoomLimma and scglmmr::dreamMixedModel — ExtractResult","title":"ExtractResult - convenience function to return statistics for downstream analysis functions such as FgseaList. Returns results from list of dream or lmFit results from those functions natively (use model.fit.list = list(fit)) or from scglmmr::RunVoomLimma and scglmmr::dreamMixedModel — ExtractResult","text":"ExtractResult - convenience function return statistics downstream analysis functions FgseaList. Returns results list dream lmFit results functions natively (use model.fit.list = list(fit)) scglmmr::RunVoomLimma scglmmr::dreamMixedModel","code":""},{"path":"https://mattpm.net/scglmmr/reference/ExtractResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ExtractResult - convenience function to return statistics for downstream analysis functions such as FgseaList. Returns results from list of dream or lmFit results from those functions natively (use model.fit.list = list(fit)) or from scglmmr::RunVoomLimma and scglmmr::dreamMixedModel — ExtractResult","text":"","code":"ExtractResult(   model.fit.list,   what = c(\"statistics\", \"lmer.z.ranks\", \"gene.t.ranks\")[1],   coefficient.number,   coef.name )"},{"path":"https://mattpm.net/scglmmr/reference/ExtractResult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ExtractResult - convenience function to return statistics for downstream analysis functions such as FgseaList. Returns results from list of dream or lmFit results from those functions natively (use model.fit.list = list(fit)) or from scglmmr::RunVoomLimma and scglmmr::dreamMixedModel — ExtractResult","text":"model.fit.list list model results indexed celltypes returned `scglmmr::dreamMixedModel`,  `scglmmr::RunVoomLimma`, manually `lmFit` `dream`. return = c('statistics', 'lmer.z.ranks' 'gene.t.ranks')[1] defaults statistics cell type, e.g. avg exprs, logFC, t statistic, pval, adj.P.Val etc. gene.z.ranks, ranks genes based z statistic (mixed models) returns list (indexed celltype named numeric vector genes ranked FgseaList. coefficient.number coefficient return -- needs one model.fit.list$coefficients: check order coefficients. Results returned dream include statistical contrasts estimated coefficients model. limma::contrasts.fit used (e.g. using do_contrast_fit = TRUE RunVoomLimma), 'coefficients' results statistical contrast. coef.name name estimated coefficient results returned; returning results statistical contrast e.g. limma::contrasts.fit() name contrast. returning model fit dream function, can also contrast specified variancePartition::makeContrastsDream() fixed effect parameter included model.","code":""},{"path":"https://mattpm.net/scglmmr/reference/ExtractResult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ExtractResult - convenience function to return statistics for downstream analysis functions such as FgseaList. Returns results from list of dream or lmFit results from those functions natively (use model.fit.list = list(fit)) or from scglmmr::RunVoomLimma and scglmmr::dreamMixedModel — ExtractResult","text":"list dataframes contrast results indexed cell type list genes ranked b t statistic format ready FgseaList.","code":""},{"path":"https://mattpm.net/scglmmr/reference/FgseaList.html","id":null,"dir":"Reference","previous_headings":"","what":"FgseaList - wrapper around fast gene set enrichment analysis with the fgsea R package https://bioconductor.org/packages/release/bioc/html/fgsea.html to implement on a list of ranks indexec by cell type. — FgseaList","title":"FgseaList - wrapper around fast gene set enrichment analysis with the fgsea R package https://bioconductor.org/packages/release/bioc/html/fgsea.html to implement on a list of ranks indexec by cell type. — FgseaList","text":"FgseaList - wrapper around fast gene set enrichment analysis fgsea R package https://bioconductor.org/packages/release/bioc/html/fgsea.html implement list ranks indexec cell type.","code":""},{"path":"https://mattpm.net/scglmmr/reference/FgseaList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FgseaList - wrapper around fast gene set enrichment analysis with the fgsea R package https://bioconductor.org/packages/release/bioc/html/fgsea.html to implement on a list of ranks indexec by cell type. — FgseaList","text":"","code":"FgseaList(..., rank.list.celltype, pathways, maxSize = 500, minSize = 9)"},{"path":"https://mattpm.net/scglmmr/reference/FgseaList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FgseaList - wrapper around fast gene set enrichment analysis with the fgsea R package https://bioconductor.org/packages/release/bioc/html/fgsea.html to implement on a list of ranks indexec by cell type. — FgseaList","text":"rank.list.celltype results returned GetRankResultsRaw GetRankResults pathways modules / gene sets named list single vector unique gene IDS maxSize see fgsea package minSize see fgsea package","code":""},{"path":"https://mattpm.net/scglmmr/reference/FgseaList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FgseaList - wrapper around fast gene set enrichment analysis with the fgsea R package https://bioconductor.org/packages/release/bioc/html/fgsea.html to implement on a list of ranks indexec by cell type. — FgseaList","text":"results fgsea package indexed celltype","code":""},{"path":"https://mattpm.net/scglmmr/reference/FgseaList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FgseaList - wrapper around fast gene set enrichment analysis with the fgsea R package https://bioconductor.org/packages/release/bioc/html/fgsea.html to implement on a list of ranks indexec by cell type. — FgseaList","text":"","code":"if (FALSE) { t1hvl_rank = GetRankResultsRaw(limma.fit.object.list  = dreamfit, coefficient.number = 1, contrast.name = \"contrastName\") register(SnowParam(4)) pparam = SnowParam(workers = 4, type = \"SOCK\", progressbar = TRUE) gsealist = FgseaList(rank.list.celltype = t1hvl_rank, pathways = btm,  BPPARAM = pparam) } # usage:"},{"path":"https://mattpm.net/scglmmr/reference/FitDream.html","id":null,"dir":"Reference","previous_headings":"","what":"FitDream - run mixed effects model on aggregated (summed) data using the method 'dream'\nby Hoffman et. al. Bioinformatics (2021) doi.org/10.1093/bioinformatics/btaa687. Fits\nmixed model using lme4 with REML and voom weights. — FitDream","title":"FitDream - run mixed effects model on aggregated (summed) data using the method 'dream'\nby Hoffman et. al. Bioinformatics (2021) doi.org/10.1093/bioinformatics/btaa687. Fits\nmixed model using lme4 with REML and voom weights. — FitDream","text":"FitDream - run mixed effects model aggregated (summed) data using method 'dream' Hoffman et. al. Bioinformatics (2021) doi.org/10.1093/bioinformatics/btaa687. Fits mixed model using lme4 REML voom weights.","code":""},{"path":"https://mattpm.net/scglmmr/reference/FitDream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FitDream - run mixed effects model on aggregated (summed) data using the method 'dream'\nby Hoffman et. al. Bioinformatics (2021) doi.org/10.1093/bioinformatics/btaa687. Fits\nmixed model using lme4 with REML and voom weights. — FitDream","text":"","code":"FitDream(   pb.list,   sample.metadata,   lme4.formula,   dream.contrast.matrix = NULL,   returnvoom = FALSE,   ncores = 4,   ... )"},{"path":"https://mattpm.net/scglmmr/reference/FitDream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FitDream - run mixed effects model on aggregated (summed) data using the method 'dream'\nby Hoffman et. al. Bioinformatics (2021) doi.org/10.1093/bioinformatics/btaa687. Fits\nmixed model using lme4 with REML and voom weights. — FitDream","text":"sample.metadata metadata, example, object returned AggregateCellMetadata lme4.formula symbolic model formula model fit, example, '~ 0 + group.timepoint + age + sex + (1|SubjectID)'. covariates must sample.metadata ncores number cores biocparallel dge.lists list DGEList objects indexed cell types -- object returned `scglmmr::Normalize` sample_column quoted character e.g. \"sample\" subject level sample variable multiple timepoints subjectID_timepoint .e. s1_0, s1_1","code":""},{"path":"https://mattpm.net/scglmmr/reference/FitDream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FitDream - run mixed effects model on aggregated (summed) data using the method 'dream'\nby Hoffman et. al. Bioinformatics (2021) doi.org/10.1093/bioinformatics/btaa687. Fits\nmixed model using lme4 with REML and voom weights. — FitDream","text":"list model fits indexed celltype","code":""},{"path":"https://mattpm.net/scglmmr/reference/FitDream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FitDream - run mixed effects model on aggregated (summed) data using the method 'dream'\nby Hoffman et. al. Bioinformatics (2021) doi.org/10.1093/bioinformatics/btaa687. Fits\nmixed model using lme4 with REML and voom weights. — FitDream","text":"","code":"if (FALSE) { # make contrast matrix L2 = makeContrastsDream(   formula = f1,   data = metadata,   contrasts = c(     baseline = \"Group.time1_0 - Group.time0_0\",     treatment_delta = \"( Group.time1_1 - Group.time1_0 ) - ( Group.time0_1 - Group.time0_0 )\",     treatment = \"( Group.time1_1 + Group.time0_1 ) / 2 - ( Group.time1_0 + Group.time0_0 ) / 2 \"   ) ) f1 = '0 + group.time + age + sex + (1|SubjectID)'  }  fits = FitDream(pb.list = pb, sample.metadata = metadata, lme4.formula = f1, dream.contrast.matrix = L2, ncores = 4) #> [1] \" Fitting models with dream method \" #> [1] \" If using this model cite Hoffman et. al. Bioinformatics (2021) doi.org/10.1093/bioinformatics/btaa687\" #> Error in FitDream(pb.list = pb, sample.metadata = metadata, lme4.formula = f1,     dream.contrast.matrix = L2, ncores = 4): object 'f1' not found"},{"path":"https://mattpm.net/scglmmr/reference/FitLmer.html","id":null,"dir":"Reference","previous_headings":"","what":"FitLmer - This is a simpler version of FitLmerContrast that makes no assumptions about structure of underlying\n data except that it can accomodate a mixed effects model formula and that there are multiple cell types to be\n  separately fitted. fit a single cell mixed effects linear model. Designed to fit an aggregated gene module score.\n  Fits a model to each cell cluster to test a grouping, treatment or combination factor; returns model fits\n  for maximum flexibility — FitLmer","title":"FitLmer - This is a simpler version of FitLmerContrast that makes no assumptions about structure of underlying\n data except that it can accomodate a mixed effects model formula and that there are multiple cell types to be\n  separately fitted. fit a single cell mixed effects linear model. Designed to fit an aggregated gene module score.\n  Fits a model to each cell cluster to test a grouping, treatment or combination factor; returns model fits\n  for maximum flexibility — FitLmer","text":"FitLmer - simpler version FitLmerContrast makes assumptions structure underlying  data except can accomodate mixed effects model formula multiple cell types   separately fitted. fit single cell mixed effects linear model. Designed fit aggregated gene module score.   Fits model cell cluster test grouping, treatment combination factor; returns model fits   maximum flexibility","code":""},{"path":"https://mattpm.net/scglmmr/reference/FitLmer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FitLmer - This is a simpler version of FitLmerContrast that makes no assumptions about structure of underlying\n data except that it can accomodate a mixed effects model formula and that there are multiple cell types to be\n  separately fitted. fit a single cell mixed effects linear model. Designed to fit an aggregated gene module score.\n  Fits a model to each cell cluster to test a grouping, treatment or combination factor; returns model fits\n  for maximum flexibility — FitLmer","text":"","code":"FitLmer(   module_data_frame,   celltype_column = \"celltype\",   metadata,   lme4.formula = NULL )"},{"path":"https://mattpm.net/scglmmr/reference/FitLmer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FitLmer - This is a simpler version of FitLmerContrast that makes no assumptions about structure of underlying\n data except that it can accomodate a mixed effects model formula and that there are multiple cell types to be\n  separately fitted. fit a single cell mixed effects linear model. Designed to fit an aggregated gene module score.\n  Fits a model to each cell cluster to test a grouping, treatment or combination factor; returns model fits\n  for maximum flexibility — FitLmer","text":"module_data_frame data cell model -- designed scores modules (columns) returned scglmmr::WeightedModuleScore celltype_column column metadata cluster / celltype designation cell lme4metadata metadata model fit f1 model furmula","code":""},{"path":[]},{"path":"https://mattpm.net/scglmmr/reference/FitLmer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FitLmer - This is a simpler version of FitLmerContrast that makes no assumptions about structure of underlying\n data except that it can accomodate a mixed effects model formula and that there are multiple cell types to be\n  separately fitted. fit a single cell mixed effects linear model. Designed to fit an aggregated gene module score.\n  Fits a model to each cell cluster to test a grouping, treatment or combination factor; returns model fits\n  for maximum flexibility — FitLmer","text":"","code":"if (FALSE) { s = SubsetData(s, ident.use = tc) s = NormalizeData(s,normalization.method = 'LogNormalize',assay = 'RNA')   # format metadata as factors group_id is order leveled for: # contrast_fit = contrast(emm1, method = list( (c21 - c20) - (c11 - c10) )) md = s@meta.data %>%   filter(timepoint %in% c(0,1)) %>%   mutate(group_id = paste(group, timepoint, sep = '_')) %>%   mutate(group_id = factor(group_id,  levels = c('0_0', '0_1', '1_0', '1_1'))) %>%   mutate(subjectid = factor(sampleid)) %>%   select(celltype, subjectid, age, group_id) %>%   mutate(age = as.numeric(age)) %>%   droplevels()  # qc data to remove celltypes with no cells for some subhects at both timepoints # keeps MLE more stable for the estimates of random intercept ct.si = apply(table(md$celltype, md$subjectid) , 1, min) c.keep = names(ct.si[ct.si > 7]) md = md[md$celltype %in% c.keep, ]   # add single cell weighted module scores # split to standardize within cell type ct.md = split(md, f = md$celltype) mod_scores = lapply(ct.md, function(x){   scglmmr::WeightedCellModuleScore(gene_matrix = s@assays$RNA@data[ ,rownames(x)],                                    module_list = mtor.sigs,                                    threshold = 0,                                    # standardize within protein celltype                                    cellwise_scaling = TRUE,                                    return_weighted = FALSE ) }) ms = bind_rows(mod_scores)  # correctly order rows after the split. ms = ms[match(x = rownames(md), table = rownames(ms)), ] stopifnot(all.equal(rownames(ms), rownames(md)))   # specify model f1 = 'modulescore ~ group_id + age + (1|subjectid)'  # fit sc mod mixed model on ewighted module scores. mm_res.m1 = scglmmr::FitLmerContrast(module_data_frame = ms,                                      celltype_column = 'celltype',                                      metadata = md,                                      lmer_formula = f1,                                      plotdatqc = TRUE,                                      fixed_effects = NULL,                                      figpath = plot_savepath) }"},{"path":"https://mattpm.net/scglmmr/reference/FitLmerContrast.html","id":null,"dir":"Reference","previous_headings":"","what":"FitLmerContrast - for data with pre post treatment and 2 response groups; within each cell type contrast difference\n in fold change between groups, baseline difference, and fold change across groups of module scores. — FitLmerContrast","title":"FitLmerContrast - for data with pre post treatment and 2 response groups; within each cell type contrast difference\n in fold change between groups, baseline difference, and fold change across groups of module scores. — FitLmerContrast","text":"FitLmerContrast - data pre post treatment 2 response groups; within cell type contrast difference  fold change groups, baseline difference, fold change across groups module scores.","code":""},{"path":"https://mattpm.net/scglmmr/reference/FitLmerContrast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FitLmerContrast - for data with pre post treatment and 2 response groups; within each cell type contrast difference\n in fold change between groups, baseline difference, and fold change across groups of module scores. — FitLmerContrast","text":"","code":"FitLmerContrast(   module_data_frame,   celltype_column = \"celltype\",   metadata,   fixed_effects = NULL,   lmer_formula = NULL,   plotdatqc = TRUE,   figpath )"},{"path":"https://mattpm.net/scglmmr/reference/FitLmerContrast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FitLmerContrast - for data with pre post treatment and 2 response groups; within each cell type contrast difference\n in fold change between groups, baseline difference, and fold change across groups of module scores. — FitLmerContrast","text":"module_data_frame data cell model -- designed scores modules (columns) returned scglmmr::WeightedModuleScore celltype_column column metadata cluster / celltype designation cell lme4metadata metadata model fit f1 model furmula contrast_list list linear model contrasts. plot_savepath path save results","code":""},{"path":[]},{"path":"https://mattpm.net/scglmmr/reference/FitLmerContrast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FitLmerContrast - for data with pre post treatment and 2 response groups; within each cell type contrast difference\n in fold change between groups, baseline difference, and fold change across groups of module scores. — FitLmerContrast","text":"","code":"if (FALSE) { # load data from single cell data object Seurat = readRDS(\"my_seurat_object.rds\")  # add cellwise module score for each signature mod_scores = WeightedCellModuleScore(seurat_object = Seurat,                                      module_list = btm,                                      threshold = 0.1,                                      return_weighted = FALSE, cellwise_scaling = FALSE,                                      Seurat_version = \"2\") Seurat = AddMetaData(Seurat,metadata = mod_scores) module_n = names(sig_test)  # set up module data frame module_df = Seurat@meta.data %>% select(barcode_check, celltype_joint, module_n)  # format metadata as factors group_id is order leveled for contrast_fit = contrast(emm1, method = list( (c21 - c20) - (c11 - c10) )) md = Seurat@meta.data %>%   mutate(group_id = factor(treat_time,  levels = c('pre_low', 'post_low', 'pre_high', 'post_high'))) %>%   mutate(sampleid = factor(sampleid)) %>%   select(barcode_check, celltype_joint, sampleid,  age, group_id)  # Fit mixed model plot_savepath = paste0(my_figure_save_path, \"/marginalmeans/\"); dir.create(plot_savepath)  # specify any random intercept model e.g. f1 = 'modulescore ~ age + group_id + (1|sampleid)'  # fit sc mod mixed model on ewighted module scores. mm_res = FitLmerContrast(module_data_frame = module_df,                            celltype_column = 'celltype',                              metadata = md,                              fixed_effects = NULL,                              lmer_formula = f1,                              plotdatqc = TRUE,                              figpath = 'your/file/path') }"},{"path":"https://mattpm.net/scglmmr/reference/GSEABarPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"GSEABarPlot - plot gsea results for a single cell type — GSEABarPlot","title":"GSEABarPlot - plot gsea results for a single cell type — GSEABarPlot","text":"GSEABarPlot - plot gsea results single cell type","code":""},{"path":"https://mattpm.net/scglmmr/reference/GSEABarPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GSEABarPlot - plot gsea results for a single cell type — GSEABarPlot","text":"","code":"GSEABarPlot(   rbind_gsea_result_dataframe,   celltype_name,   fill_color,   text.size = 8 )"},{"path":"https://mattpm.net/scglmmr/reference/GSEABarPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GSEABarPlot - plot gsea results for a single cell type — GSEABarPlot","text":"rbind_gsea_result_dataframe result returned RbindGseaResultList celltype_name name celltype plotted fill_color color bar text.size size axis labels","code":""},{"path":"https://mattpm.net/scglmmr/reference/GSEABarPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GSEABarPlot - plot gsea results for a single cell type — GSEABarPlot","text":"ggplot object","code":""},{"path":"https://mattpm.net/scglmmr/reference/GSEABarPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GSEABarPlot - plot gsea results for a single cell type — GSEABarPlot","text":"","code":"if (FALSE) { p = scglmmr::GSEABarPlot(d, celltype_name = 'celltype1', fill_color = 'dodgerblue') }"},{"path":"https://mattpm.net/scglmmr/reference/GSEABubblePlot.html","id":null,"dir":"Reference","previous_headings":"","what":"GSEABubblePlot plot gsea results for all cell types — GSEABubblePlot","title":"GSEABubblePlot plot gsea results for all cell types — GSEABubblePlot","text":"GSEABubblePlot plot gsea results cell types","code":""},{"path":"https://mattpm.net/scglmmr/reference/GSEABubblePlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GSEABubblePlot plot gsea results for all cell types — GSEABubblePlot","text":"","code":"GSEABubblePlot(   rbind_gsea_result_dataframe,   save_path,   include_negative = TRUE,   save_name,   width = 8.5,   height = 7.2 )"},{"path":"https://mattpm.net/scglmmr/reference/GSEABubblePlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GSEABubblePlot plot gsea results for all cell types — GSEABubblePlot","text":"rbind_gsea_result_dataframe dataframe returned RbindGseaResultList save_path file path save results include_negative TRUE/FALSE whether include negative enrichment plot. save_name name file saved save_path width ggpsave param height ggsave param","code":""},{"path":"https://mattpm.net/scglmmr/reference/GSEABubblePlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GSEABubblePlot plot gsea results for all cell types — GSEABubblePlot","text":"nothing","code":""},{"path":"https://mattpm.net/scglmmr/reference/GSEABubblePlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GSEABubblePlot plot gsea results for all cell types — GSEABubblePlot","text":"","code":"if (FALSE) { scglmmr::GSEABubblePlot(d, save_path = figpath, save_name = \"plot.pdf\") }"},{"path":"https://mattpm.net/scglmmr/reference/GetContrastResults.html","id":null,"dir":"Reference","previous_headings":"","what":"GetContrastResults - return results from a contrast fit on list of celltypes from RunVoomLimma using topTable — GetContrastResults","title":"GetContrastResults - return results from a contrast fit on list of celltypes from RunVoomLimma using topTable — GetContrastResults","text":"GetContrastResults - return results contrast fit list celltypes RunVoomLimma using topTable","code":""},{"path":"https://mattpm.net/scglmmr/reference/GetContrastResults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GetContrastResults - return results from a contrast fit on list of celltypes from RunVoomLimma using topTable — GetContrastResults","text":"","code":"GetContrastResults(limma.fit.object.list, coefficient.number, contrast.name)"},{"path":"https://mattpm.net/scglmmr/reference/GetContrastResults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GetContrastResults - return results from a contrast fit on list of celltypes from RunVoomLimma using topTable — GetContrastResults","text":"limma.fit.object.list results returned RunVoomLimma, get coefficiennt dreamMixedModel use GetContrastResultsRaw coefficient.number corresponds contrast, nmber order contrast matrix contrast.name match exact contrast name used contrast matrix, force / remind user choose correct contrast.","code":""},{"path":"https://mattpm.net/scglmmr/reference/GetContrastResults.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GetContrastResults - return results from a contrast fit on list of celltypes from RunVoomLimma using topTable — GetContrastResults","text":"list dataframes contrast results indexed cell type","code":""},{"path":"https://mattpm.net/scglmmr/reference/GetContrastResults.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GetContrastResults - return results from a contrast fit on list of celltypes from RunVoomLimma using topTable — GetContrastResults","text":"","code":"if (FALSE) { res = scglmmr::GetContrastResults(limma.fit.object.list = bl, coefficient.number = 1, contrast.name = \"test\") }"},{"path":"https://mattpm.net/scglmmr/reference/GetContrastResultsRaw.html","id":null,"dir":"Reference","previous_headings":"","what":"GetContrastResultsRaw - calculate p values and return contrast results from modelfit with dreamMixedModel — GetContrastResultsRaw","title":"GetContrastResultsRaw - calculate p values and return contrast results from modelfit with dreamMixedModel — GetContrastResultsRaw","text":"GetContrastResultsRaw - calculate p values return contrast results modelfit dreamMixedModel","code":""},{"path":"https://mattpm.net/scglmmr/reference/GetContrastResultsRaw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GetContrastResultsRaw - calculate p values and return contrast results from modelfit with dreamMixedModel — GetContrastResultsRaw","text":"","code":"GetContrastResultsRaw(limma.fit.object.list, coefficient.number, contrast.name)"},{"path":"https://mattpm.net/scglmmr/reference/GetContrastResultsRaw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GetContrastResultsRaw - calculate p values and return contrast results from modelfit with dreamMixedModel — GetContrastResultsRaw","text":"limma.fit.object.list results returned dreamMixedModel, get coefficiennt RunVoomLimma use GetContrastResults coefficient.number corresponds contrast, nmber order contrast matrix contrast.name match exact contrast name used contrast matrix, force / remind user choose correct contrast.","code":""},{"path":"https://mattpm.net/scglmmr/reference/GetContrastResultsRaw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GetContrastResultsRaw - calculate p values and return contrast results from modelfit with dreamMixedModel — GetContrastResultsRaw","text":"list dataframes contrast results indexed cell type","code":""},{"path":"https://mattpm.net/scglmmr/reference/GetContrastResultsRaw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GetContrastResultsRaw - calculate p values and return contrast results from modelfit with dreamMixedModel — GetContrastResultsRaw","text":"","code":"if (FALSE) { fit_res = scglmmr::GetContrastResultsRaw(limma.fit.object.list = fit,                                         coefficient.number = 1,                                         contrast.name = \"foldchangedifference\")  }"},{"path":"https://mattpm.net/scglmmr/reference/GetGeneMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"GetGeneMatrix get a gene matric for plotting genes by celltypes statistic from pseudobulk model results e.g. using heatmap pheatmap or complexheatmap — GetGeneMatrix","title":"GetGeneMatrix get a gene matric for plotting genes by celltypes statistic from pseudobulk model results e.g. using heatmap pheatmap or complexheatmap — GetGeneMatrix","text":"GetGeneMatrix get gene matric plotting genes celltypes statistic pseudobulk model results e.g. using heatmap pheatmap complexheatmap","code":""},{"path":"https://mattpm.net/scglmmr/reference/GetGeneMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GetGeneMatrix get a gene matric for plotting genes by celltypes statistic from pseudobulk model results e.g. using heatmap pheatmap or complexheatmap — GetGeneMatrix","text":"","code":"GetGeneMatrix(   result.list,   gene_subset = NULL,   stat_for_matrix = \"logFC\",   pvalfilter,   logfcfilter )"},{"path":"https://mattpm.net/scglmmr/reference/GetGeneMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GetGeneMatrix get a gene matric for plotting genes by celltypes statistic from pseudobulk model results e.g. using heatmap pheatmap or complexheatmap — GetGeneMatrix","text":"result.list object returned GetContrastResults GetContrastResultsRaw gene_subset preselected subset genes vector, example returned GetLeadingEdgeFull. Defaults union fitted genes across cell types. stat_for_matrix defaults logFC, effect size. can columns returned limma::topTable pvalfilter filter genes retain matrix raw p values logfcfilter filter genes retain matrix logFC","code":""},{"path":"https://mattpm.net/scglmmr/reference/GetGeneMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GetGeneMatrix get a gene matric for plotting genes by celltypes statistic from pseudobulk model results e.g. using heatmap pheatmap or complexheatmap — GetGeneMatrix","text":"matrix","code":""},{"path":"https://mattpm.net/scglmmr/reference/GetGeneMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GetGeneMatrix get a gene matric for plotting genes by celltypes statistic from pseudobulk model results e.g. using heatmap pheatmap or complexheatmap — GetGeneMatrix","text":"","code":"if (FALSE) { le = scglmmr::GetLeadingEdgeFull(gsea.list = gsea1, padj.filter = 0.1, NES.filter = -Inf) genesub = do.call(rbind, le) %$% gene %>% unique mtx2 = scglmmr::GetGeneMatrix(result.list = res,                               stat_for_matrix = \"logFC\",                               gene_subset = genesub,                               pvalfilter = -Inf,                               logfcfilter = 0.1)  pheatmap::pheatmap(mtx2,                    breaks =seq(from = 0, to = 2,length.out = 99),                    filename = paste0(figpath,\"LEgenes_heatmap.pdf\")) }"},{"path":"https://mattpm.net/scglmmr/reference/GetLeadingEdgeFull.html","id":null,"dir":"Reference","previous_headings":"","what":"GetLeadingEdgeFull Get a tidy dataframe of ALL Leading Edge Genes from gene set enrichment for all cell types — GetLeadingEdgeFull","title":"GetLeadingEdgeFull Get a tidy dataframe of ALL Leading Edge Genes from gene set enrichment for all cell types — GetLeadingEdgeFull","text":"GetLeadingEdgeFull Get tidy dataframe Leading Edge Genes gene set enrichment cell types","code":""},{"path":"https://mattpm.net/scglmmr/reference/GetLeadingEdgeFull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GetLeadingEdgeFull Get a tidy dataframe of ALL Leading Edge Genes from gene set enrichment for all cell types — GetLeadingEdgeFull","text":"","code":"GetLeadingEdgeFull(gsea.list, padj.filter = NULL, NES.filter, p.filter = NULL)"},{"path":"https://mattpm.net/scglmmr/reference/GetLeadingEdgeFull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GetLeadingEdgeFull Get a tidy dataframe of ALL Leading Edge Genes from gene set enrichment for all cell types — GetLeadingEdgeFull","text":"gsea.list results returned RunFgseaOnRankList padj.filter filter reslts NES.filter filter results p.filter raw p value filter -- padj.filter must specified","code":""},{"path":"https://mattpm.net/scglmmr/reference/GetLeadingEdgeFull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GetLeadingEdgeFull Get a tidy dataframe of ALL Leading Edge Genes from gene set enrichment for all cell types — GetLeadingEdgeFull","text":"list","code":""},{"path":"https://mattpm.net/scglmmr/reference/GetLeadingEdgeFull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GetLeadingEdgeFull Get a tidy dataframe of ALL Leading Edge Genes from gene set enrichment for all cell types — GetLeadingEdgeFull","text":"","code":"if (FALSE) { lefull = scglmmr::GetLeadingEdgeFull(gsea.list = gsea1, padj.filter = 0.1,NES.filter = -Inf) }"},{"path":"https://mattpm.net/scglmmr/reference/GetLeadingEdgeGenes.html","id":null,"dir":"Reference","previous_headings":"","what":"GetLeadingEdgeGenes get the leading edge genes from a single cell type / module combination — GetLeadingEdgeGenes","title":"GetLeadingEdgeGenes get the leading edge genes from a single cell type / module combination — GetLeadingEdgeGenes","text":"GetLeadingEdgeGenes get leading edge genes single cell type / module combination","code":""},{"path":"https://mattpm.net/scglmmr/reference/GetLeadingEdgeGenes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GetLeadingEdgeGenes get the leading edge genes from a single cell type / module combination — GetLeadingEdgeGenes","text":"","code":"GetLeadingEdgeGenes(gsea.result.list, celltype.index, module.name)"},{"path":"https://mattpm.net/scglmmr/reference/GetLeadingEdgeGenes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GetLeadingEdgeGenes get the leading edge genes from a single cell type / module combination — GetLeadingEdgeGenes","text":"gsea.result.list results RunFgseaOnRank celltype.index celltype number result list module.name name module","code":""},{"path":"https://mattpm.net/scglmmr/reference/GetLeadingEdgeGenes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GetLeadingEdgeGenes get the leading edge genes from a single cell type / module combination — GetLeadingEdgeGenes","text":"vector genes","code":""},{"path":"https://mattpm.net/scglmmr/reference/GetLeadingEdgeGenes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GetLeadingEdgeGenes get the leading edge genes from a single cell type / module combination — GetLeadingEdgeGenes","text":"","code":"if (FALSE) { le_mono = GetLeadingEdgeGenes(gsea.result.list = gsea1, celltype.index = 4, module.name = 'my_modulename_from_gsearesults') }"},{"path":"https://mattpm.net/scglmmr/reference/GetRankResults.html","id":null,"dir":"Reference","previous_headings":"","what":"GetRankResults get list of gene ranks by t stat for fGSEA — GetRankResults","title":"GetRankResults get list of gene ranks by t stat for fGSEA — GetRankResults","text":"GetRankResults get list gene ranks t stat fGSEA","code":""},{"path":"https://mattpm.net/scglmmr/reference/GetRankResults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GetRankResults get list of gene ranks by t stat for fGSEA — GetRankResults","text":"","code":"GetRankResults(limma.fit.object.list, coefficient.number, contrast.name)"},{"path":"https://mattpm.net/scglmmr/reference/GetRankResults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GetRankResults get list of gene ranks by t stat for fGSEA — GetRankResults","text":"limma.fit.object.list results returned RunLimmaVoom. Use GetRankResultsRaw results returned dreamMixedModel coefficient.number coefficient custom contrasts , check head(result@coefficients) contrast.name can arbitrary match result coefficient name designed force user know coefficient using fitted contrast model.","code":""},{"path":"https://mattpm.net/scglmmr/reference/GetRankResults.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GetRankResults get list of gene ranks by t stat for fGSEA — GetRankResults","text":"list gene ranks t stat -- use argument `RunFgseaOnRankList`","code":""},{"path":"https://mattpm.net/scglmmr/reference/GetRankResults.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GetRankResults get list of gene ranks by t stat for fGSEA — GetRankResults","text":"","code":"if (FALSE) { test = scglmmr::GetRankResults(limma.fit.object.list = bl, coefficient.number = 1, \"test\") }"},{"path":"https://mattpm.net/scglmmr/reference/GetRankResultsRaw.html","id":null,"dir":"Reference","previous_headings":"","what":"GetRankResultsRaw get list of gene ranks by raw t statistic for fGSEA. for results returned by dreamMixedModel — GetRankResultsRaw","title":"GetRankResultsRaw get list of gene ranks by raw t statistic for fGSEA. for results returned by dreamMixedModel — GetRankResultsRaw","text":"GetRankResultsRaw get list gene ranks raw t statistic fGSEA. results returned dreamMixedModel","code":""},{"path":"https://mattpm.net/scglmmr/reference/GetRankResultsRaw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GetRankResultsRaw get list of gene ranks by raw t statistic for fGSEA. for results returned by dreamMixedModel — GetRankResultsRaw","text":"","code":"GetRankResultsRaw(contrast.result.raw.list)"},{"path":"https://mattpm.net/scglmmr/reference/GetRankResultsRaw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GetRankResultsRaw get list of gene ranks by raw t statistic for fGSEA. for results returned by dreamMixedModel — GetRankResultsRaw","text":"contrast.result.raw.list results returned dreamMixedModel","code":""},{"path":"https://mattpm.net/scglmmr/reference/GetRankResultsRaw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GetRankResultsRaw get list of gene ranks by raw t statistic for fGSEA. for results returned by dreamMixedModel — GetRankResultsRaw","text":"list gene ranks t stat -- use argument `RunFgseaOnRankList`","code":""},{"path":"https://mattpm.net/scglmmr/reference/GetRankResultsRaw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GetRankResultsRaw get list of gene ranks by raw t statistic for fGSEA. for results returned by dreamMixedModel — GetRankResultsRaw","text":"","code":"if (FALSE) { fit_res = scglmmr::GetContrastResultsRaw(limma.fit.object.list = fit,                                          coefficient.number = 1,                                          contrast.name = \"foldchangedifference\") fit_rank = scglmmr::GetRankResultsRaw(contrast.result.raw.list = fit_res) }"},{"path":"https://mattpm.net/scglmmr/reference/GetTidySummary.html","id":null,"dir":"Reference","previous_headings":"","what":"GetTidySummary - tidy data summary for a single cell type — GetTidySummary","title":"GetTidySummary - tidy data summary for a single cell type — GetTidySummary","text":"GetTidySummary - tidy data summary single cell type","code":""},{"path":"https://mattpm.net/scglmmr/reference/GetTidySummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GetTidySummary - tidy data summary for a single cell type — GetTidySummary","text":"","code":"GetTidySummary(av.exprs.list, celltype.index, genes.use)"},{"path":"https://mattpm.net/scglmmr/reference/GetTidySummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GetTidySummary - tidy data summary for a single cell type — GetTidySummary","text":"av.exprs.list - object returned PseudobulkList (use average first convert summed counts cpm) celltype.index - index celltype ret results see names PseudobulkList object genes.use - subet genes use","code":""},{"path":"https://mattpm.net/scglmmr/reference/GetTidySummary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GetTidySummary - tidy data summary for a single cell type — GetTidySummary","text":"tidy dataframe","code":""},{"path":"https://mattpm.net/scglmmr/reference/GetTidySummary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GetTidySummary - tidy data summary for a single cell type — GetTidySummary","text":"","code":"#' @examples if (FALSE) { gene_highlight =  c(\"IRF1\",\"TNFRSF17\",\"ABL1\") mono = GetTidyCohort(av.exprs.list = av, celltype.index = 7, genes.use = gene_highlight) PlotGeneDistCohort(merged_av_data = mono,                    save_name = \"mono_highlight_512\",                    save_path = figpath,                    title = paste0(names(av[7]), \"genesub\" ),                    height = 3.8, width = 4.5,                    nrow = 2)  }"},{"path":"https://mattpm.net/scglmmr/reference/HeatmapDiag.html","id":null,"dir":"Reference","previous_headings":"","what":"HeatmapDiag utility function for `pheatmap` using `slanter` to order the maximum values across the matrix diagonal — HeatmapDiag","title":"HeatmapDiag utility function for `pheatmap` using `slanter` to order the maximum values across the matrix diagonal — HeatmapDiag","text":"HeatmapDiag utility function `pheatmap` using `slanter` order maximum values across matrix diagonal","code":""},{"path":"https://mattpm.net/scglmmr/reference/HeatmapDiag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HeatmapDiag utility function for `pheatmap` using `slanter` to order the maximum values across the matrix diagonal — HeatmapDiag","text":"","code":"HeatmapDiag(matrix, ...)"},{"path":"https://mattpm.net/scglmmr/reference/HeatmapDiag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HeatmapDiag utility function for `pheatmap` using `slanter` to order the maximum values across the matrix diagonal — HeatmapDiag","text":"matrix R matrix input `pheatmap`. object returned `scglmmr::GetGeneMatrix`","code":""},{"path":"https://mattpm.net/scglmmr/reference/HeatmapDiag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HeatmapDiag utility function for `pheatmap` using `slanter` to order the maximum values across the matrix diagonal — HeatmapDiag","text":"pheatmap object","code":""},{"path":"https://mattpm.net/scglmmr/reference/HeatmapDiag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HeatmapDiag utility function for `pheatmap` using `slanter` to order the maximum values across the matrix diagonal — HeatmapDiag","text":"","code":"if (FALSE) { # make gene plot of top 50 ranked genes within each subst # fit1 = dreamMixedModel(...) r1 = ExtractResult(model.fit.list = fit1, coefficient.number = 1,coef.name = 'L1', what = 'gene.t.ranks') rank = lapply(r1,function(x) names(x[1:50])) top50ranks = unlist(rank) %>% unique() res1 = ExtractResult(model.fit.list = fit1, coefficient.number = 1,coef.name = 'L1') mtx = GetGeneMatrix(result.list = res1, gene_subset = top50ranks, stat_for_matrix = 'logFC', pvalfilter = 1, logfcfilter = -Inf) pdf(file = paste0(figpath, 'geneplot.pdf'), width = 3.5 ,height = 5) HeatmapDiag(matrix = mtx, fontsize_row = 1) dev.off() }"},{"path":"https://mattpm.net/scglmmr/reference/LeadEdgeSampleHeatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"LeadEdgeSampleHeatmap make a heatmap of average expression for top or leading edge genes returned by LeadEdgeTidySampleExprs — LeadEdgeSampleHeatmap","title":"LeadEdgeSampleHeatmap make a heatmap of average expression for top or leading edge genes returned by LeadEdgeTidySampleExprs — LeadEdgeSampleHeatmap","text":"LeadEdgeSampleHeatmap make heatmap average expression top leading edge genes returned LeadEdgeTidySampleExprs","code":""},{"path":"https://mattpm.net/scglmmr/reference/LeadEdgeSampleHeatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LeadEdgeSampleHeatmap make a heatmap of average expression for top or leading edge genes returned by LeadEdgeTidySampleExprs — LeadEdgeSampleHeatmap","text":"","code":"LeadEdgeSampleHeatmap(   tidy.exprs.list,   modulename,   celltype_plot,   metadata,   metadata_annotate,   sample_column,   returnmat = FALSE,   plotwidth = 5,   plotheight = 8,   savepath,   savename )"},{"path":"https://mattpm.net/scglmmr/reference/LeadEdgeSampleHeatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LeadEdgeSampleHeatmap make a heatmap of average expression for top or leading edge genes returned by LeadEdgeTidySampleExprs — LeadEdgeSampleHeatmap","text":"tidy.exprs.list object returned returned TidySampleData LeadEdgeTidySampleExprs created metadata object returned PseudobulkList (average expression prefered visualization; else recommend e.g. first lapply(x, edgeR::cpm) standardize bulk data. modulename name module plot celltype_plot name celltype plot metadata cells x metadata dataframe metadata_annotate vector variables (columns) sample level  metadata annotate heatmap. Must categorical sample e.g. \"age\" \"nUMI\" sample_column column metadata object corresponding sample labels, usually 'smaple' returnmat instead making annotated heatmap just return matrix averge values per sample module subset","code":""},{"path":"https://mattpm.net/scglmmr/reference/LeadEdgeSampleHeatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LeadEdgeSampleHeatmap make a heatmap of average expression for top or leading edge genes returned by LeadEdgeTidySampleExprs — LeadEdgeSampleHeatmap","text":"pheatmap object","code":""},{"path":"https://mattpm.net/scglmmr/reference/LeadEdgeSampleHeatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LeadEdgeSampleHeatmap make a heatmap of average expression for top or leading edge genes returned by LeadEdgeTidySampleExprs — LeadEdgeSampleHeatmap","text":"","code":"if (FALSE) { scglmmr::LeadEdgeSampleHeatmap(tidy.exprs.list = le_expr,                                modulename = \"MODULENAME\",                                celltype_plot = \"TCELL\",                                metadata = meta,                                metadata_annotate = c('group', 'timepoint', 'age', 'gender'),                                sample_column = 'sample',                               returnmat = F,                                savepath = figpath,                               savename = \"filename\") }"},{"path":"https://mattpm.net/scglmmr/reference/LeadEdgeTidySampleExprs.html","id":null,"dir":"Reference","previous_headings":"","what":"LeadEdgeTidySampleExprs - convert a PseudobulkList into a tidy dataframe for each sample across cell types of the leading edge genes from a gsea list — LeadEdgeTidySampleExprs","title":"LeadEdgeTidySampleExprs - convert a PseudobulkList into a tidy dataframe for each sample across cell types of the leading edge genes from a gsea list — LeadEdgeTidySampleExprs","text":"LeadEdgeTidySampleExprs - convert PseudobulkList tidy dataframe sample across cell types leading edge genes gsea list","code":""},{"path":"https://mattpm.net/scglmmr/reference/LeadEdgeTidySampleExprs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LeadEdgeTidySampleExprs - convert a PseudobulkList into a tidy dataframe for each sample across cell types of the leading edge genes from a gsea list — LeadEdgeTidySampleExprs","text":"","code":"LeadEdgeTidySampleExprs(   av.exprs.list,   gsea.list,   padj.filter,   p.filter = NULL,   NES.filter )"},{"path":"https://mattpm.net/scglmmr/reference/LeadEdgeTidySampleExprs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LeadEdgeTidySampleExprs - convert a PseudobulkList into a tidy dataframe for each sample across cell types of the leading edge genes from a gsea list — LeadEdgeTidySampleExprs","text":"av.exprs.list object returned `PseudobulkList` summed average counts gsea.list object returned RunFgseaOnRankList padj.filter filter adjusted p GSEA p.filter filter p GSEA padj.filter must specified use option. NES.filter filter normalized enrichment score GSEA","code":""},{"path":"https://mattpm.net/scglmmr/reference/LeadEdgeTidySampleExprs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LeadEdgeTidySampleExprs - convert a PseudobulkList into a tidy dataframe for each sample across cell types of the leading edge genes from a gsea list — LeadEdgeTidySampleExprs","text":"list tidy dataframes celltype","code":""},{"path":"https://mattpm.net/scglmmr/reference/LeadEdgeTidySampleExprs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LeadEdgeTidySampleExprs - convert a PseudobulkList into a tidy dataframe for each sample across cell types of the leading edge genes from a gsea list — LeadEdgeTidySampleExprs","text":"","code":"if (FALSE) { av = scglmmr::PseudobulkList(rawcounts = umi,                              metadata = meta,                              sample_col = \"sample\",                              celltype_col = \"celltype\",                              avg_or_sum = 'average') le_expr = scglmmr::LeadEdgeTidySampleExprs(av.exprs.list = av,                                            gsea.list = hlmk_ctm0,                                            padj.filter = 0.1,                                            NES.filter = -Inf) }"},{"path":"https://mattpm.net/scglmmr/reference/LeadingEdgeIndexed.html","id":null,"dir":"Reference","previous_headings":"","what":"LeadingEdgeIndexed - extract leading edge genes from FgseaList results, return a new embedded list of named modules, indexed by celltype — LeadingEdgeIndexed","title":"LeadingEdgeIndexed - extract leading edge genes from FgseaList results, return a new embedded list of named modules, indexed by celltype — LeadingEdgeIndexed","text":"LeadingEdgeIndexed - extract leading edge genes FgseaList results, return new embedded list named modules, indexed celltype","code":""},{"path":"https://mattpm.net/scglmmr/reference/LeadingEdgeIndexed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LeadingEdgeIndexed - extract leading edge genes from FgseaList results, return a new embedded list of named modules, indexed by celltype — LeadingEdgeIndexed","text":"","code":"LeadingEdgeIndexed(gsea.result.list, padj.threshold = 0.05, p.threshold = NULL)"},{"path":"https://mattpm.net/scglmmr/reference/LeadingEdgeIndexed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LeadingEdgeIndexed - extract leading edge genes from FgseaList results, return a new embedded list of named modules, indexed by celltype — LeadingEdgeIndexed","text":"gsea.result.list results FgseaList RunFgseaOnRankList padj.threshold within cell type return list leading edge genes padj less parameter value.","code":""},{"path":"https://mattpm.net/scglmmr/reference/LeadingEdgeIndexed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LeadingEdgeIndexed - extract leading edge genes from FgseaList results, return a new embedded list of named modules, indexed by celltype — LeadingEdgeIndexed","text":"embedded list - list level 1 indexed cell type, contains new list level 2, leading edge genes gsea results filtered padj.","code":""},{"path":"https://mattpm.net/scglmmr/reference/LeadingEdgeIndexed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LeadingEdgeIndexed - extract leading edge genes from FgseaList results, return a new embedded list of named modules, indexed by celltype — LeadingEdgeIndexed","text":"","code":"if (FALSE) { t1hvl_rank = GetRankResultsRaw(limma.fit.object.list  = ebf, coefficient.number = 1, contrast.name = \"time_1_highvslow\") gsea = FgseaList(rank.list.celltype = t1hvl_rank) celltype.indexed.modules.leadingedge = LeadingEdgeIndexed(gsea, 0.05) }"},{"path":"https://mattpm.net/scglmmr/reference/Normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize - normalize summed gene counts across samples. This is a wrapper around edgeR functions `calcNormFactors` and `filterByExpr`. — Normalize","title":"Normalize - normalize summed gene counts across samples. This is a wrapper around edgeR functions `calcNormFactors` and `filterByExpr`. — Normalize","text":"Normalize - normalize summed gene counts across samples. wrapper around edgeR functions `calcNormFactors` `filterByExpr`.","code":""},{"path":"https://mattpm.net/scglmmr/reference/Normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize - normalize summed gene counts across samples. This is a wrapper around edgeR functions `calcNormFactors` and `filterByExpr`. — Normalize","text":"","code":"Normalize(   pseudobulk.list,   design,   group = NULL,   normalization.method = \"RLE\",   minimum.gene.count = 1 )"},{"path":"https://mattpm.net/scglmmr/reference/Normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize - normalize summed gene counts across samples. This is a wrapper around edgeR functions `calcNormFactors` and `filterByExpr`. — Normalize","text":"pseudobulk.list object created PseudobulkList use function argument PseudobulkList avg_or_sum 'sum' computes normalization pseudobulk libraries design see edgeR `filterByExpr` function. design matrix created using model.matrix e.g. metadata created  AggregateCellMetadata. normalization.method see edgeR function calcNormFactors, argument `method` minimum.gene.count see edgeR function `filterbyExpr` thie argument `min.count`","code":""},{"path":"https://mattpm.net/scglmmr/reference/Normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize - normalize summed gene counts across samples. This is a wrapper around edgeR functions `calcNormFactors` and `filterByExpr`. — Normalize","text":"list dgeList objects indexed celltype","code":""},{"path":[]},{"path":"https://mattpm.net/scglmmr/reference/NormalizePseudobulk.html","id":null,"dir":"Reference","previous_headings":"","what":"NormalizePseudobulk — NormalizePseudobulk","title":"NormalizePseudobulk — NormalizePseudobulk","text":"NormalizePseudobulk","code":""},{"path":"https://mattpm.net/scglmmr/reference/NormalizePseudobulk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NormalizePseudobulk — NormalizePseudobulk","text":"","code":"NormalizePseudobulk(   pseudobulklist,   normalization.method = \"RLE\",   design_matrix,   minimum.gene.count = 1 )"},{"path":"https://mattpm.net/scglmmr/reference/NormalizePseudobulk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NormalizePseudobulk — NormalizePseudobulk","text":"pseudobulklist object created PseudobulkList use function argument PseudobulkList avg_or_sum 'sum' computes normalization pseudobulk libraries normalization.method see edgeR function calcNormFactors, argument `method` design_matrix sample level metadata created AggregateCellMetadata used make designamatrix. minimum.gene.count see edgeR function `filterbyExpr` thie argument `min.count`","code":""},{"path":"https://mattpm.net/scglmmr/reference/NormalizePseudobulk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NormalizePseudobulk — NormalizePseudobulk","text":"list dgeList indexed celltype","code":""},{"path":[]},{"path":"https://mattpm.net/scglmmr/reference/PlotFgsea.html","id":null,"dir":"Reference","previous_headings":"","what":"PlotFgsea identical to GSEABubblePlot, returns plot for manual adjustment or saving and also clusters the map. — PlotFgsea","title":"PlotFgsea identical to GSEABubblePlot, returns plot for manual adjustment or saving and also clusters the map. — PlotFgsea","text":"PlotFgsea identical GSEABubblePlot, returns plot manual adjustment saving also clusters map.","code":""},{"path":"https://mattpm.net/scglmmr/reference/PlotFgsea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PlotFgsea identical to GSEABubblePlot, returns plot for manual adjustment or saving and also clusters the map. — PlotFgsea","text":"","code":"PlotFgsea(   gsea_result_list,   NES_filter = -Inf,   padj_filter = 0.1,   p.threshold = NULL )"},{"path":"https://mattpm.net/scglmmr/reference/PlotFgsea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PlotFgsea identical to GSEABubblePlot, returns plot for manual adjustment or saving and also clusters the map. — PlotFgsea","text":"rbind_gsea_result_dataframe dataframe returned RbindGseaResultList","code":""},{"path":"https://mattpm.net/scglmmr/reference/PlotFgsea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PlotFgsea identical to GSEABubblePlot, returns plot for manual adjustment or saving and also clusters the map. — PlotFgsea","text":"ggplot object","code":""},{"path":"https://mattpm.net/scglmmr/reference/PlotFgsea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PlotFgsea identical to GSEABubblePlot, returns plot for manual adjustment or saving and also clusters the map. — PlotFgsea","text":"","code":"if (FALSE) { p = PlotFgsea(gsea_result_list = g1, padj_filter = 0.1) }"},{"path":"https://mattpm.net/scglmmr/reference/PlotGeneDistCohort.html","id":null,"dir":"Reference","previous_headings":"","what":"PlotGeneDistCohort — PlotGeneDistCohort","title":"PlotGeneDistCohort — PlotGeneDistCohort","text":"PlotGeneDistCohort","code":""},{"path":"https://mattpm.net/scglmmr/reference/PlotGeneDistCohort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PlotGeneDistCohort — PlotGeneDistCohort","text":"","code":"PlotGeneDistCohort(   merged_av_data,   save_path,   save_name,   title = NULL,   nrow = 5,   height = 8,   width = 10,   plot_subset = FALSE,   genes_plot = NULL )"},{"path":"https://mattpm.net/scglmmr/reference/PlotGeneDistCohort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PlotGeneDistCohort — PlotGeneDistCohort","text":"merged_av_data data returned single cell type `GetTidySummary` save_path file path save results save_name name plot saved `save_path` title title plot nrow number rows facet genes plotted height ggsave param width ggsave param plot_subset whether subset genes `merged_av_data` genes_plot subset genes plot","code":""},{"path":"https://mattpm.net/scglmmr/reference/PlotGeneDistCohort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PlotGeneDistCohort — PlotGeneDistCohort","text":"nothing","code":""},{"path":"https://mattpm.net/scglmmr/reference/PlotGeneDistCohort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PlotGeneDistCohort — PlotGeneDistCohort","text":"","code":"if (FALSE) { gene_highlight =  c(\"IRF1\",\"TNFRSF17\",\"ABL1\") mono = GetTidyCohort(av.exprs.list = av, celltype.index = 7, genes.use = gene_highlight) PlotGeneDistCohort(merged_av_data = mono,                    save_name = \"mono_highlight_512\",                    save_path = figpath,                    title = paste0(names(av[7]), \"genesub\" ),                    height = 3.8, width = 4.5,                    nrow = 2)  }"},{"path":"https://mattpm.net/scglmmr/reference/PlotHypergeometric.html","id":null,"dir":"Reference","previous_headings":"","what":"PlotHypergeometric - plot results returned by RunHypergeometricTest — PlotHypergeometric","title":"PlotHypergeometric - plot results returned by RunHypergeometricTest — PlotHypergeometric","text":"PlotHypergeometric - plot results returned RunHypergeometricTest","code":""},{"path":"https://mattpm.net/scglmmr/reference/PlotHypergeometric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PlotHypergeometric - plot results returned by RunHypergeometricTest — PlotHypergeometric","text":"","code":"PlotHypergeometric(   hyperg_result,   p.adjust.filter = 0.05,   genenumber_filter = 0,   savepath = figpath,   savename,   title,   height = 10,   width = 8 )"},{"path":"https://mattpm.net/scglmmr/reference/PlotHypergeometric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PlotHypergeometric - plot results returned by RunHypergeometricTest — PlotHypergeometric","text":"hyperg_result result returned `RunHypergeometricTest` p.adjust.filter filter results genenumber_filter number genes within enrichment minimum. savepath save oath savename name object saved save_path title title plot height ggsave param width ggsave param","code":""},{"path":"https://mattpm.net/scglmmr/reference/PlotHypergeometric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PlotHypergeometric - plot results returned by RunHypergeometricTest — PlotHypergeometric","text":"nothing","code":""},{"path":"https://mattpm.net/scglmmr/reference/PlotHypergeometric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PlotHypergeometric - plot results returned by RunHypergeometricTest — PlotHypergeometric","text":"","code":"if (FALSE) { load(termdf) # this term2gene dataframe is included in the package see clusterProfiler hyp = scglmmr::RunHypergeometricTest(result_list = fit_res,                                      TERM2GENE_dataframe = termdf,                                      pval_threshold = 0.1,                                      logFC_threshold = 0,                                      usefdr_threshold = FALSE) # plot results scglmmr::PlotHypergeometric(hyperg_result = hyp,                             p.adjust.filter = 0.1,                             genenumber_filter = 2,                             savepath = figpath,                             savename = \"name\",                             title = \"title\")  }"},{"path":"https://mattpm.net/scglmmr/reference/PseudobulkList.html","id":null,"dir":"Reference","previous_headings":"","what":"PseudobulkList - make a pseudobuk summed or average dataset for each samplexcelltype — PseudobulkList","title":"PseudobulkList - make a pseudobuk summed or average dataset for each samplexcelltype — PseudobulkList","text":"PseudobulkList - make pseudobuk summed average dataset samplexcelltype","code":""},{"path":"https://mattpm.net/scglmmr/reference/PseudobulkList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PseudobulkList - make a pseudobuk summed or average dataset for each samplexcelltype — PseudobulkList","text":"","code":"PseudobulkList(   rawcounts,   metadata,   sample_col,   celltype_col,   avg_or_sum = \"sum\" )"},{"path":"https://mattpm.net/scglmmr/reference/PseudobulkList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PseudobulkList - make a pseudobuk summed or average dataset for each samplexcelltype — PseudobulkList","text":"rawcounts raw count UMI data assay sum average celtype sample. metadata dataframe meta data cells-rows variables-columns .e. ColData seuratmeta.data sample_col quoted character e.g. \"sample\" subject level sample variable - multiple timepoints helps code subjectID_timepoint .e. s1_0, s1_1 celltype_col quoted character e.g. \"celltype\" - celltypes / clusters create bulk libraries avg_or_sum whether compute default 'sum' 'average' library sample within celltype (recommend sum)","code":""},{"path":"https://mattpm.net/scglmmr/reference/PseudobulkList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PseudobulkList - make a pseudobuk summed or average dataset for each samplexcelltype — PseudobulkList","text":"R list standard R matrices indexed celltype","code":""},{"path":"https://mattpm.net/scglmmr/reference/PseudobulkList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PseudobulkList - make a pseudobuk summed or average dataset for each samplexcelltype — PseudobulkList","text":"","code":"if (FALSE) { pb = scglmmr::PseudobulkList(rawcounts = umi, metadata = meta, sample_col = \"sample\",         celltype_col = \"lineage\", avg_or_sum = \"sum\") }"},{"path":"https://mattpm.net/scglmmr/reference/RbindGseaResultList.html","id":null,"dir":"Reference","previous_headings":"","what":"RbindGseaResultList - prepare gsea result list for visualization funcitons GseaBubblePlot or GseaBarPlot; called by PlotFgseaList — RbindGseaResultList","title":"RbindGseaResultList - prepare gsea result list for visualization funcitons GseaBubblePlot or GseaBarPlot; called by PlotFgseaList — RbindGseaResultList","text":"RbindGseaResultList - prepare gsea result list visualization funcitons GseaBubblePlot GseaBarPlot; called PlotFgseaList","code":""},{"path":"https://mattpm.net/scglmmr/reference/RbindGseaResultList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RbindGseaResultList - prepare gsea result list for visualization funcitons GseaBubblePlot or GseaBarPlot; called by PlotFgseaList — RbindGseaResultList","text":"","code":"RbindGseaResultList(   gsea_result_list,   NES_filter = -Inf,   padj_filter = NULL,   pval_filter = NULL )"},{"path":"https://mattpm.net/scglmmr/reference/RbindGseaResultList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RbindGseaResultList - prepare gsea result list for visualization funcitons GseaBubblePlot or GseaBarPlot; called by PlotFgseaList — RbindGseaResultList","text":"gsea_result_list result returned RunFgseaOnRankList NES_filter filter results NES padj_filter filter results adjusted p threshold","code":""},{"path":"https://mattpm.net/scglmmr/reference/RbindGseaResultList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RbindGseaResultList - prepare gsea result list for visualization funcitons GseaBubblePlot or GseaBarPlot; called by PlotFgseaList — RbindGseaResultList","text":"dataframe subsetted gsea results celltypes","code":""},{"path":"https://mattpm.net/scglmmr/reference/RbindGseaResultList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RbindGseaResultList - prepare gsea result list for visualization funcitons GseaBubblePlot or GseaBarPlot; called by PlotFgseaList — RbindGseaResultList","text":"","code":"if (FALSE) { d = scglmmr::RbindGseaResultList(gsea_result_list = gsea1,NES_filter = -Inf,padj_filter = 0.2) }"},{"path":"https://mattpm.net/scglmmr/reference/RunFgseaOnRankList.html","id":null,"dir":"Reference","previous_headings":"","what":"RunFgseaOnRankList - wrapper around fast gene set enrichment analysis with the fgsea R package https://bioconductor.org/packages/release/bioc/html/fgsea.html — RunFgseaOnRankList","title":"RunFgseaOnRankList - wrapper around fast gene set enrichment analysis with the fgsea R package https://bioconductor.org/packages/release/bioc/html/fgsea.html — RunFgseaOnRankList","text":"RunFgseaOnRankList - wrapper around fast gene set enrichment analysis fgsea R package https://bioconductor.org/packages/release/bioc/html/fgsea.html","code":""},{"path":"https://mattpm.net/scglmmr/reference/RunFgseaOnRankList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RunFgseaOnRankList - wrapper around fast gene set enrichment analysis with the fgsea R package https://bioconductor.org/packages/release/bioc/html/fgsea.html — RunFgseaOnRankList","text":"","code":"RunFgseaOnRankList(   ...,   rank.list.celltype,   pathways,   maxSize = 500,   minSize = 9,   nperm = 250000,   positive.enrich.only = FALSE )"},{"path":"https://mattpm.net/scglmmr/reference/RunFgseaOnRankList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RunFgseaOnRankList - wrapper around fast gene set enrichment analysis with the fgsea R package https://bioconductor.org/packages/release/bioc/html/fgsea.html — RunFgseaOnRankList","text":"rank.list.celltype results returned GetRankResultsRaw GetRankResults pathways modules / gene sets named list single vector unique gene IDS maxSize see fgsea package minSize see fgsea package nperm recommended keep set 25000 based optomization p value stabilization positive.enrich.include negative enrichments results? TRUE/FALSE","code":""},{"path":[]},{"path":"https://mattpm.net/scglmmr/reference/RunFgseaOnRankList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RunFgseaOnRankList - wrapper around fast gene set enrichment analysis with the fgsea R package https://bioconductor.org/packages/release/bioc/html/fgsea.html — RunFgseaOnRankList","text":"","code":"# usage: t1hvl_rank = GetRankResultsRaw(limma.fit.object.list  = ebf, coefficient.number = 1, contrast.name = \"time_1_highvslow\") #> Error in GetRankResultsRaw(limma.fit.object.list = ebf, coefficient.number = 1,     contrast.name = \"time_1_highvslow\"): unused arguments (limma.fit.object.list = ebf, coefficient.number = 1, contrast.name = \"time_1_highvslow\") gsea = RunFgseaOnRankList(rank.list.celltype = t1hvl_rank, ) #> Warning: 'RunFgseaOnRankList' is deprecated. #> Use 'FgseaList' instead. #> See help(\"Deprecated\") #> Error in RunFgseaOnRankList(rank.list.celltype = t1hvl_rank, ): object 't1hvl_rank' not found"},{"path":"https://mattpm.net/scglmmr/reference/RunHypergeometricTest.html","id":null,"dir":"Reference","previous_headings":"","what":"RunHypergeometricTest - run a hypergeometric test on results returned by GetContrastResults or GetContrastResultsRaw — RunHypergeometricTest","title":"RunHypergeometricTest - run a hypergeometric test on results returned by GetContrastResults or GetContrastResultsRaw — RunHypergeometricTest","text":"RunHypergeometricTest - run hypergeometric test results returned GetContrastResults GetContrastResultsRaw","code":""},{"path":"https://mattpm.net/scglmmr/reference/RunHypergeometricTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RunHypergeometricTest - run a hypergeometric test on results returned by GetContrastResults or GetContrastResultsRaw — RunHypergeometricTest","text":"","code":"RunHypergeometricTest(   result_list,   TERM2GENE_dataframe,   pval_threshold = 0.05,   logFC_threshold = 0.5,   usefdr_threshold = FALSE )"},{"path":"https://mattpm.net/scglmmr/reference/RunHypergeometricTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RunHypergeometricTest - run a hypergeometric test on results returned by GetContrastResults or GetContrastResultsRaw — RunHypergeometricTest","text":"result_list results returned GetContrastResults GetContrastResultsRaw TERM2GENE_dataframe see clusterprofiler, objects automatically loaded scglmmr package one term_df_btm, term_df_kegg, term_df_reactome etc. pval_threshold p threshold genes consider hypergeometric distribution logFC_threshold logFC threshold  genes consider hypergeometric distribution usefdr_threshold use FDR adjusted p values ranking genes-strict filter single cell data, recommended set FALSE","code":""},{"path":"https://mattpm.net/scglmmr/reference/RunHypergeometricTest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RunHypergeometricTest - run a hypergeometric test on results returned by GetContrastResults or GetContrastResultsRaw — RunHypergeometricTest","text":"tidy hypergeometric test results dataframe","code":""},{"path":"https://mattpm.net/scglmmr/reference/RunHypergeometricTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RunHypergeometricTest - run a hypergeometric test on results returned by GetContrastResults or GetContrastResultsRaw — RunHypergeometricTest","text":"","code":"if (FALSE) { load(termdf) # this term2gene dataframe is included in the package see clusterProfiler hyp = scglmmr::RunHypergeometricTest(result_list = fit_res,                                      TERM2GENE_dataframe = termdf,                                      pval_threshold = 0.1,                                      logFC_threshold = 0,                                      usefdr_threshold = FALSE) # plot results scglmmr::PlotHypergeometric(hyperg_result = hyp,                             p.adjust.filter = 0.1,                             genenumber_filter = 2,                             savepath = figpath,                             savename = \"name\",                             title = \"title\")  }"},{"path":"https://mattpm.net/scglmmr/reference/RunVoomLimma.html","id":null,"dir":"Reference","previous_headings":"","what":"RunVoomLimma — RunVoomLimma","title":"RunVoomLimma — RunVoomLimma","text":"RunVoomLimma","code":""},{"path":"https://mattpm.net/scglmmr/reference/RunVoomLimma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RunVoomLimma — RunVoomLimma","text":"","code":"RunVoomLimma(dgelists, design_matrix, do_contrast_fit, my_contrast_matrix)"},{"path":"https://mattpm.net/scglmmr/reference/RunVoomLimma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RunVoomLimma — RunVoomLimma","text":"dgelists ist DGElist created NormalizePseudobulk design_matrix design matrix do_contrast_fit whether fit custom priori contrasts my_contrast_matrix custom priori contrasts created make.contrasts - see limma edgeR manual","code":""},{"path":"https://mattpm.net/scglmmr/reference/RunVoomLimma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RunVoomLimma — RunVoomLimma","text":"list linear model fits celltype","code":""},{"path":"https://mattpm.net/scglmmr/reference/RunVoomLimma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RunVoomLimma — RunVoomLimma","text":"","code":"if (FALSE) { c_mat = makeContrasts( foldchange_difference = (group_timepoint1_1 - group_timepoint1_0) - (group_timepoint0_1 - group_timepoint0_0), time1_foldchange = (group_timepoint1_1 + group_timepoint0_1) / 2  - (group_timepoint1_0 + group_timepoint0_0) / 2, baseline_groups = (group_timepoint1_0 - group_timepoint0_0), levels = colnames(designmat) ) # fit simple linear model for the baseline group level contrast bl = scglmmr::RunVoomLimma(dgelists = dge, design_matrix = designmat, do_contrast_fit = T, my_contrast_matrix = c_mat[ ,3]) } # run limma using voom observational weights for non mixed effects models using emperical bayes"},{"path":"https://mattpm.net/scglmmr/reference/RunVoomLimma_covar.html","id":null,"dir":"Reference","previous_headings":"","what":"RunVoomLimma_covar RunLimmaVoom with an option to adjust for a covariate within mRNA. — RunVoomLimma_covar","title":"RunVoomLimma_covar RunLimmaVoom with an option to adjust for a covariate within mRNA. — RunVoomLimma_covar","text":"RunVoomLimma_covar RunLimmaVoom option adjust covariate within mRNA.","code":""},{"path":"https://mattpm.net/scglmmr/reference/RunVoomLimma_covar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RunVoomLimma_covar RunLimmaVoom with an option to adjust for a covariate within mRNA. — RunVoomLimma_covar","text":"","code":"RunVoomLimma_covar(   dgelists,   design_matrix,   co_variable_genes = NULL,   grouptable,   do_contrast_fit,   my_contrast_matrix,   my_model_metadata,   celltypes.vector = NULL,   parallel.sz = 4 )"},{"path":"https://mattpm.net/scglmmr/reference/RunVoomLimma_covar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RunVoomLimma_covar RunLimmaVoom with an option to adjust for a covariate within mRNA. — RunVoomLimma_covar","text":"dgelists DGElists created PseudobulkList design_matrix design matrix created BulkDesignMatrix co_variable_genes co variable genes grouptable argument gsva do_contrast_fit contrasts my_contrast_matrix contrast matrix my_model_metadata model metadata celltypes.vector vector celltypes assign names dgeList","code":""},{"path":[]},{"path":"https://mattpm.net/scglmmr/reference/RunVoomLimma_covar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RunVoomLimma_covar RunLimmaVoom with an option to adjust for a covariate within mRNA. — RunVoomLimma_covar","text":"","code":"if (FALSE) { RunVoomLimma_covar(dgelists = dge_lists, design_matrix = design, co_variable_genes = NULL, grouptable = grouptable ,do_contrast_fit = TRUE,  my_contrast_matrix = c_mat, my_model_metadata = md, celltypes.vector = NULL, parallel.sz = 4)  }"},{"path":"https://mattpm.net/scglmmr/reference/SCMixedPoisson.html","id":null,"dir":"Reference","previous_headings":"","what":"SCMixedPoisson - Fit a gene level Poisson count mixed generalized linear model. — SCMixedPoisson","title":"SCMixedPoisson - Fit a gene level Poisson count mixed generalized linear model. — SCMixedPoisson","text":"SCMixedPoisson - Fit gene level Poisson count mixed generalized linear model.","code":""},{"path":"https://mattpm.net/scglmmr/reference/SCMixedPoisson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SCMixedPoisson - Fit a gene level Poisson count mixed generalized linear model. — SCMixedPoisson","text":"","code":"SCMixedPoisson(   gene_data,   metadata,   model_formula = \"gene ~ offset(log(nUMI)) + timepoint + (1|subjectid)\",   test_variable = NULL,   covariate_variables = NULL,   celltype_genes_test = NULL,   save_path )"},{"path":"https://mattpm.net/scglmmr/reference/SCMixedPoisson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SCMixedPoisson - Fit a gene level Poisson count mixed generalized linear model. — SCMixedPoisson","text":"gene_data matrix raw single cell UMI counts genes COLUMNS cells ROWS; .e. transpose t() Bioconductor Seurat raw.data slots genes_test specified, columns must contain genes genes_test .e. umi_matrix = t(seurat_raw_counts[unique(unlist((genes_test)), ]) metadata metadata cell used fitting model model_formula example: 'gene ~ offset(log(nUMI)) + timepoint + (1|subjectid)' 'gene~' '(1|subjectid)' variables kept . variable 'timepoint' can altered treatment perturbation effect tested. User can also specify 'covariate_variables' make formula gene~offset(nUMI) + covariate1 + covariate2 + test_variable + (1|subjectid) automatically. test_variable column metadata coding perturbation variable. e.g. 'timepoint' formula: gene ~ timepoint + (1|subjectid)' covariate_variables vector variables metadata add model covariates; used model_formula NULL; otherwise speify directly celltype_genes_test R list indexed cell type: subset genes test cell type. save_path file path save intermediate results cell type.","code":""},{"path":"https://mattpm.net/scglmmr/reference/SCMixedPoisson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SCMixedPoisson - Fit a gene level Poisson count mixed generalized linear model. — SCMixedPoisson","text":"results matrix genes across cell types tested.","code":""},{"path":"https://mattpm.net/scglmmr/reference/SCMixedPoisson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SCMixedPoisson - Fit a gene level Poisson count mixed generalized linear model. — SCMixedPoisson","text":"","code":"results = SCMixedPoisson(gene_data = gene_data,   lme4metadata = meta_data,   model_formula = 'gene ~ offset(log(nUMI)) + timepoint + (1|sampleid)',   celltype_genes_test = celltype_indexed_gene_vector ) #> Error in SCMixedPoisson(gene_data = gene_data, lme4metadata = meta_data,     model_formula = \"gene ~ offset(log(nUMI)) + timepoint + (1|sampleid)\",     celltype_genes_test = celltype_indexed_gene_vector): unused argument (lme4metadata = meta_data)"},{"path":"https://mattpm.net/scglmmr/reference/SubjectCelltypeTable.html","id":null,"dir":"Reference","previous_headings":"","what":"SubjectCelltypeTable - quality control on sample level aggregation across cell types — SubjectCelltypeTable","title":"SubjectCelltypeTable - quality control on sample level aggregation across cell types — SubjectCelltypeTable","text":"SubjectCelltypeTable - quality control sample level aggregation across cell types","code":""},{"path":"https://mattpm.net/scglmmr/reference/SubjectCelltypeTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SubjectCelltypeTable - quality control on sample level aggregation across cell types — SubjectCelltypeTable","text":"","code":"SubjectCelltypeTable(metadata, celltype_column, sample_column)"},{"path":"https://mattpm.net/scglmmr/reference/SubjectCelltypeTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SubjectCelltypeTable - quality control on sample level aggregation across cell types — SubjectCelltypeTable","text":"metadata dataframe meta data cells-rows variables-columns .e. ColData seurat@meta.data sample_col quoted character e.g. \"sample\" subject level sample variable - multiple timepoints helps code subjectID_timepoint .e. s1_0, s1_1 celltype_col quoted character e.g. \"celltype\" - celltypes / clusters create bulk libraries","code":""},{"path":"https://mattpm.net/scglmmr/reference/SubjectCelltypeTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SubjectCelltypeTable - quality control on sample level aggregation across cell types — SubjectCelltypeTable","text":"R list table","code":""},{"path":"https://mattpm.net/scglmmr/reference/SubjectCelltypeTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SubjectCelltypeTable - quality control on sample level aggregation across cell types — SubjectCelltypeTable","text":"","code":"if (FALSE) { # define counts and metadata and subset to cells above rm seurat object from workspace meta = s@meta.data umi = s@assays$RNA@counts rm(s); gc() # QC contingency of cells by subject for each celltype tab = scglmmr::SubjectCelltypeTable(metadata = meta, celltype_column = \"celltype\", sample_column = \"sample\") tab$celltypes_remove; tab$`low representation celltypes`; tab$table # remove cells prior to pseudobulk analysis meta = meta[!meta$celltype_label_3 %in% tab$celltypes_remove, ] # subset data umi = umi[ ,rownames(meta)] # proceed to PseudobulkList. }"},{"path":"https://mattpm.net/scglmmr/reference/TidySampleData.html","id":null,"dir":"Reference","previous_headings":"","what":"TidySampleData convert data from PseudobulkList into a dataframe for each sample across cell types of the top differentially expressed genes for a contrast — TidySampleData","title":"TidySampleData convert data from PseudobulkList into a dataframe for each sample across cell types of the top differentially expressed genes for a contrast — TidySampleData","text":"TidySampleData convert data PseudobulkList dataframe sample across cell types top differentially expressed genes contrast","code":""},{"path":"https://mattpm.net/scglmmr/reference/TidySampleData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TidySampleData convert data from PseudobulkList into a dataframe for each sample across cell types of the top differentially expressed genes for a contrast — TidySampleData","text":"","code":"TidySampleData(   av.exprs.list,   result.list,   P.Value.filter,   logFC.filter,   top_n_genes = NULL )"},{"path":"https://mattpm.net/scglmmr/reference/TidySampleData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TidySampleData convert data from PseudobulkList into a dataframe for each sample across cell types of the top differentially expressed genes for a contrast — TidySampleData","text":"av.exprs.list object returned `PseudobulkList` summed average counts result.list object returned object returned `GetContrastResultsRaw()` `GetContrastResults()` P.Value.filter filter results logFC.filter filter results top_n_genes instead stat thresholds , get expression n genes specified param, subsets celltype top n genes  ranked t statistic.","code":""},{"path":"https://mattpm.net/scglmmr/reference/TidySampleData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TidySampleData convert data from PseudobulkList into a dataframe for each sample across cell types of the top differentially expressed genes for a contrast — TidySampleData","text":"list tidy dataframes celltype","code":""},{"path":"https://mattpm.net/scglmmr/reference/TidySampleData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"TidySampleData convert data from PseudobulkList into a dataframe for each sample across cell types of the top differentially expressed genes for a contrast — TidySampleData","text":"","code":"if (FALSE) { av = scglmmr::PseudobulkList(rawcounts = umi,                              metadata = meta,                              sample_col = \"sample\",                              celltype_col = \"celltype\",                              avg_or_sum = 'average') fit_res = scglmmr::GetContrastResultsRaw(limma.fit.object.list = fit,                                         coefficient.number = 1,                                         contrast.name = \"foldchangedifference\") le_expr = scglmmr::TopGenesTidySampleExprs(av.exprs.list = av, result.list = fit_res, P.Value.filter = 0.2, logFC.filter=0.1, top_n_genes = 20) }"},{"path":"https://mattpm.net/scglmmr/reference/WeightedCellModuleScore.html","id":null,"dir":"Reference","previous_headings":"","what":"WeightedCellModuleScore - calculate the average or weighted aveage +/- scaling return dataframe of cells by average module score — WeightedCellModuleScore","title":"WeightedCellModuleScore - calculate the average or weighted aveage +/- scaling return dataframe of cells by average module score — WeightedCellModuleScore","text":"WeightedCellModuleScore - calculate average weighted aveage +/- scaling return dataframe cells average module score","code":""},{"path":"https://mattpm.net/scglmmr/reference/WeightedCellModuleScore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"WeightedCellModuleScore - calculate the average or weighted aveage +/- scaling return dataframe of cells by average module score — WeightedCellModuleScore","text":"","code":"WeightedCellModuleScore(   gene_matrix = NULL,   module_list,   threshold = 0,   cellwise_scaling = FALSE,   return_weighted = FALSE )"},{"path":"https://mattpm.net/scglmmr/reference/WeightedCellModuleScore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"WeightedCellModuleScore - calculate the average or weighted aveage +/- scaling return dataframe of cells by average module score — WeightedCellModuleScore","text":"gene_matrix - normalized genes (rows) cells (columns) module_list - names list gene modules - element vector gene names. threshold - least fraction genes signature must < 0 across cells else score calculated cellwise_scaling - T/F scale across cells ? return_weighted - T/F weight averae multiplying gene representation?","code":""},{"path":"https://mattpm.net/scglmmr/reference/WeightedCellModuleScore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"WeightedCellModuleScore - calculate the average or weighted aveage +/- scaling return dataframe of cells by average module score — WeightedCellModuleScore","text":"dataframe cells barcodes (rownames) gene module scores (columns)","code":""},{"path":"https://mattpm.net/scglmmr/reference/WeightedCellModuleScore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"WeightedCellModuleScore - calculate the average or weighted aveage +/- scaling return dataframe of cells by average module score — WeightedCellModuleScore","text":"","code":"if (FALSE) { }"},{"path":"https://mattpm.net/scglmmr/reference/calc_avg_module_zscore.html","id":null,"dir":"Reference","previous_headings":"","what":"calc_avg_module_zscore - calculate average module z score of list of modules on a PseudobulkList\nThis is equivalent to the average z score method used in in Kotliarov et. al. Nature Med 2020\nzscore is calculated across both genes and samples\nit is adopted below to run on 'pseudobulk lists' (average ","title":"calc_avg_module_zscore - calculate average module z score of list of modules on a PseudobulkList\nThis is equivalent to the average z score method used in in Kotliarov et. al. Nature Med 2020\nzscore is calculated across both genes and samples\nit is adopted below to run on 'pseudobulk lists' (average ","text":"calc_avg_module_zscore - calculate average module z score list modules PseudobulkList equivalent average z score method used Kotliarov et. al. Nature Med 2020 zscore calculated across genes samples adopted run 'pseudobulk lists' (average \"averagemetacell.list\" pseudobulk list created PseudobulkList) small wrapper called AverageSampleModuleZscore. calculate signature score cell type, BTM, Subject function input = named list modules, dataframe subject rows genes columns","code":""},{"path":"https://mattpm.net/scglmmr/reference/calc_avg_module_zscore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calc_avg_module_zscore - calculate average module z score of list of modules on a PseudobulkList\nThis is equivalent to the average z score method used in in Kotliarov et. al. Nature Med 2020\nzscore is calculated across both genes and samples\nit is adopted below to run on 'pseudobulk lists' (average ","text":"","code":"calc_avg_module_zscore(module.list, average.data.frame)"},{"path":"https://mattpm.net/scglmmr/reference/calc_avg_module_zscore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calc_avg_module_zscore - calculate average module z score of list of modules on a PseudobulkList\nThis is equivalent to the average z score method used in in Kotliarov et. al. Nature Med 2020\nzscore is calculated across both genes and samples\nit is adopted below to run on 'pseudobulk lists' (average ","text":"module.list list modules average.data.frame - created AverageSampleModuleZscore","code":""},{"path":"https://mattpm.net/scglmmr/reference/calc_avg_module_zscore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calc_avg_module_zscore - calculate average module z score of list of modules on a PseudobulkList\nThis is equivalent to the average z score method used in in Kotliarov et. al. Nature Med 2020\nzscore is calculated across both genes and samples\nit is adopted below to run on 'pseudobulk lists' (average ","text":"see AverageSampleModuleZscore","code":""},{"path":"https://mattpm.net/scglmmr/reference/calc_avg_module_zscore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"calc_avg_module_zscore - calculate average module z score of list of modules on a PseudobulkList\nThis is equivalent to the average z score method used in in Kotliarov et. al. Nature Med 2020\nzscore is calculated across both genes and samples\nit is adopted below to run on 'pseudobulk lists' (average ","text":"","code":"if (FALSE) { results = calc_avg_module_zscore(module.list = btm, average.data.frame = av_df) } # Average Module sample Z score"},{"path":"https://mattpm.net/scglmmr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://mattpm.net/scglmmr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"}]
